se_bands_lm_2_score <- cbind(preds_lm_2_score$fit + 2 * preds_lm_2_score$se, preds_lm_2_score$fit - 2 * preds_lm_2_score$se) # standard error bands
# Plotting predictions and error bands
lines(score.grid, preds_lm_2_score$fit, col = color_blind_palette[2], lwd = 2)
matlines(score.grid, se_bands_lm_2_score, col = color_blind_palette[2], lty = 2)
# Cubic model plot
preds_lm_3_score <- predict(lm.fit.score.3, data.frame(borrower_score=score.grid), se = TRUE)# predictions
se_bands_lm_3_score <- cbind(preds_lm_3_score$fit + 2 * preds_lm_3_score$se, preds_lm_3_score$fit - 2 * preds_lm_3_score$se) # standard error bands
# Plotting predictions and error bands
lines(score.grid, preds_lm_3_score$fit, col = color_blind_palette[3], lwd = 2)
matlines(score.grid, se_bands_lm_3_score, col = color_blind_palette[3], lty = 2)
# Quartic model plot
preds_lm_4_score <- predict(lm.fit.score.4, data.frame(borrower_score=score.grid), se = TRUE)# predictions
se_bands_lm_4_score <- cbind(preds_lm_4_score$fit + 2 * preds_lm_4_score$se, preds_lm_4_score$fit - 2 * preds_lm_4_score$se) # standard error bands
# Plotting predictions and error bands
lines(score.grid, preds_lm_4_score$fit, col = color_blind_palette[4], lwd = 2)
matlines(score.grid, se_bands_lm_4_score, col = color_blind_palette[4], lty = 2)
# Quintic model plot
preds_lm_5_score <- predict(lm.fit.score.5, data.frame(borrower_score=score.grid), se = TRUE)# predictions
se_bands_lm_5_score <- cbind(preds_lm_5_score$fit + 2 * preds_lm_5_score$se, preds_lm_5_score$fit - 2 * preds_lm_5_score$se) # standard error bands
# Plotting predictions and error bands
lines(score.grid, preds_lm_5_score$fit, col = color_blind_palette[5], lwd = 2)
matlines(score.grid, se_bands_lm_5_score, col = color_blind_palette[5], lty = 2)
# Legends
legend(x = "topleft", legend = c("linear", "quadratic"), lty=c(1,1), lwd = c(2.5,2.5), col = color_blind_palette[1:2])
legend(x = "bottomleft", legend = c("cubic", "quartic", "quintic"), inset = c(0.00, 0.0), lty=c(1,1,1), lwd = c(2.5,2.5,2.5), col = color_blind_palette[3:5])
lm.fit.balance.1 <- lm(interest ~ balance, data=fannie_mae_training)
lm.fit.balance.2 <- lm(interest ~ poly(balance, 2, raw = TRUE), data=fannie_mae_training)
lm.fit.balance.3 <- lm(interest ~ poly(balance, 3, raw = TRUE), data=fannie_mae_training)
lm.fit.balance.4 <- lm(interest ~ poly(balance, 4, raw = TRUE), data=fannie_mae_training)
lm.fit.balance.5 <- lm(interest ~ poly(balance, 5, raw = TRUE), data=fannie_mae_training)
anova(lm.fit.balance.1, lm.fit.balance.2, lm.fit.balance.3, lm.fit.balance.4, lm.fit.balance.5)
# Plotting interest versus original loan balance
plot(fannie_mae_sample$balance, fannie_mae_sample$interest, col = "darkgrey", ylab="Interest", xlab="Original loan balance", main = "Interest vs. original loan balance\n Fitting linear and non-linear models")
# Generating a vector of loan balance values for the various models
balance_lims <- range(fannie_mae_training$balance)
balance.grid <- seq(from = balance_lims[1], to = balance_lims[2], by = 1000)
# Linear model plot
preds_lm_1_balance <- predict(lm.fit.balance.1, data.frame(balance=balance.grid), se = TRUE) # predictions
se_bands_lm_1_balance <- cbind(preds_lm_1_balance$fit + 2 * preds_lm_1_balance$se, preds_lm_1_balance$fit - 2 * preds_lm_1_balance$se) # standard error bands
# Plotting predictions and error bands
lines(balance.grid, preds_lm_1_balance$fit, col = color_blind_palette[1], lwd = 2)
matlines(balance.grid, se_bands_lm_1_balance, col = color_blind_palette[1], lty = 2)
# Quadratic model plot
preds_lm_2_balance <- predict(lm.fit.balance.2, data.frame(balance=balance.grid), se = TRUE) # predictions
se_bands_lm_2_balance <- cbind(preds_lm_2_balance$fit + 2 * preds_lm_2_balance$se, preds_lm_2_balance$fit - 2 * preds_lm_2_balance$se) # standard error bands
# Plotting predictions and error bands
lines(balance.grid, preds_lm_2_balance$fit, col = color_blind_palette[2], lwd = 2)
matlines(balance.grid, se_bands_lm_2_balance, col = color_blind_palette[2], lty = 2)
# Cubic model plot
preds_lm_3_balance <- predict(lm.fit.balance.3, data.frame(balance=balance.grid), se = TRUE) # predictions
se_bands_lm_3_balance <- cbind(preds_lm_3_balance$fit + 2 * preds_lm_3_balance$se, preds_lm_3_balance$fit - 2 * preds_lm_3_balance$se) # standard error bands
# Plotting predictions and error bands
lines(balance.grid, preds_lm_3_balance$fit, col = color_blind_palette[3], lwd = 2)
matlines(balance.grid, se_bands_lm_3_balance, col = color_blind_palette[3], lty = 2)
# Quartic model plot
preds_lm_4_balance <- predict(lm.fit.balance.4, data.frame(balance=balance.grid), se = TRUE) # predictions
se_bands_lm_4_balance <- cbind(preds_lm_4_balance$fit + 2 * preds_lm_4_balance$se, preds_lm_4_balance$fit - 2 * preds_lm_4_balance$se) # standard error bands
# Plotting predictions and error bands
lines(balance.grid, preds_lm_4_balance$fit, col = color_blind_palette[4], lwd = 2)
matlines(balance.grid, se_bands_lm_4_balance, col = color_blind_palette[4], lty = 2)
# Quintic model plot
preds_lm_5_balance <- predict(lm.fit.balance.5, data.frame(balance=balance.grid), se = TRUE) # predictions
se_bands_lm_5_balance <- cbind(preds_lm_5_balance$fit + 2 * preds_lm_5_balance$se, preds_lm_5_balance$fit - 2 * preds_lm_5_balance$se) # standard error bands
# Plotting predictions and error bands
lines(balance.grid, preds_lm_5_balance$fit, col = color_blind_palette[5], lwd = 2)
matlines(balance.grid, se_bands_lm_5_balance, col = color_blind_palette[5], lty = 2)
# Legends
legend(x = "bottomright", inset = c(0.2, 0.0), legend = c("linear", "quadratic"), lty=c(1,1), lwd = c(2.5,2.5), col = color_blind_palette[1:2])
legend(x = "bottomright", legend = c("cubic", "quartic", "quintic"), inset = c(0.00, 0.0), lty=c(1,1,1), lwd = c(2.5,2.5,2.5), col = color_blind_palette[3:5])
lm.fit.non_linear <- lm(interest ~ poly(balance, 3, raw = TRUE) + poly(dti, 5, raw = TRUE) + poly(ltv, 5, raw = TRUE) + poly(borrower_score, 2, raw = TRUE) + poly(co_borrower_score, 3, raw = TRUE) + purpose + property_type + relocation + first_time, data = fannie_mae_training )
summary(lm.fit.non_linear)
# Predictions vector
predict_interest_test_nonlin <- predict(lm.fit.non_linear, newdata = fannie_mae_test)
# Compute RSS on test set
RSS_test_nonlin <- (fannie_mae_test$interest - predict_interest_test_nonlin)^2 %>% sum()
# TSS_test does not change
# Compute R_sqrd
R_sqrd_test_nonlin <- 1 - RSS_test_nonlin / TSS_test
# Compute RSS, R_sqrd, and MSE on training set
RSS_nonlin <- residuals(lm.fit.non_linear)^2 %>% sum()
R_sqrd_nonlin <- 1 - RSS_nonlin / TSS
MSE_nonlin <- RSS_nonlin / num_rows_training
# Compute MSE on test set
MSE_test_nonlin <- RSS_test_nonlin / num_rows_test
hist(fannie_mae_sample$dti, xlab = "", ylab = "", main = "DTI histogram", col = "red")
residuals(lm.fit.linear) %>% hist(col = "darkgrey")
residuals(lm.fit.linear) %>% hist(col = "darkgrey")
residuals(lm.fit.linear) %>% hist(col = "darkgrey")
legend(x = "topleft", legend = c("linear", "quadratic"))
residuals(lm.fit.linear) %>% hist(col = "darkgrey")
legend(x = "topleft", legend = c(paste("mean =", mean(residuals(lm.fit.linear)))))
residuals(lm.fit.linear) %>% hist(col = "darkgrey")
legend(x = "topleft", legend = c(paste("mean =", mean(residuals(lm.fit.linear)))))
grid()
residuals(lm.fit.linear) %>% hist(col = "darkgrey", main = "Histogram of linear model residuals")
legend(x = "topleft", legend = c(paste("mean =", mean(residuals(lm.fit.linear)))))
grid()
?round
residuals(lm.fit.linear) %>% hist(col = "darkgrey", main = "Histogram of linear model residuals")
legend(x = "topleft", legend = c(paste("mean =", mean(signif(residuals(lm.fit.linear))))))
grid()
residuals(lm.fit.linear) %>% hist(col = "darkgrey", main = "Histogram of linear model residuals")
legend(x = "topleft", legend = c(paste("mean =", mean(residuals(lm.fit.linear)))))
grid()
x2 <- pi * 100^(-1:3)
x2
round(x2,3)
signif(x2,3)
residuals(lm.fit.linear) %>% hist(col = "darkgrey", main = "Histogram of linear model residuals")
legend(x = "topleft", legend = c(paste("mean =", mean(signif(residuals(lm.fit.linear), 4)))))
grid()
residuals(lm.fit.linear) %>% hist(col = "darkgrey", main = "Histogram of linear model residuals")
legend(x = "topleft", legend = c(paste("mean =", mean(signif(residuals(lm.fit.linear), 2)))))
grid()
residuals(lm.fit.linear) %>% hist(col = "darkgrey", main = "Histogram of linear model residuals")
legend(x = "topleft", legend = c(paste("mean =", mean(residuals(lm.fit.linear)))))
grid()
residuals(lm.fit.linear) %>% hist(col = "darkgrey", main = "Histogram of linear model residuals")
legend(x = "topleft", legend = c(paste("mean =", signif(mean(residuals(lm.fit.linear))))))
grid()
residuals(lm.fit.linear) %>% hist(col = "lightgrey", main = "Histogram of linear model residuals")
legend(x = "topleft", legend = c(paste("mean =", signif(mean(residuals(lm.fit.linear))))))
grid()
residuals(lm.fit.linear) %>% hist(col = "lightgrey", main = "Histogram of linear model residuals", xlab = "Residuals of linear model")
legend(x = "topleft", legend = c(paste("mean =", signif(mean(residuals(lm.fit.linear))))))
grid()
library(lmtest)
bptest.linear <- bptest(lm.fit.linear)
bptest.linear
summary(bptest.linear)
str(bptest.linear)
bptest.linear$statistic
bptest.linear$parameter
# Performing the auxiliary regression for the BP test
lm.fit.linear.residuals.squared <- lm(linear_model_residuals^2 ~ balance + dti + ltv + borrower_score + co_borrower_score + purpose + property_type + relocation + first_time, data = fannie_mae_training)
# Computing the test statistic
R_aux_sqrd <- summary(lm.fit.linear.residuals.squared)$r.squared
BP_test_statistic <- length(linear_model_residuals) * R_aux_sqrd
pchisq(BP_test_statistic, df = 13, lower.tail = FALSE)
# Plotting the distributions of the quantitative predictors
par(mfrow=c(2,2))
hist(fannie_mae_sample$borrower_score, xlab = "", ylab = "", main = "Borrower score histogram", col = "lightgrey")
hist(fannie_mae_sample$ltv, xlab = "", ylab = "", main = "LTV histogram")
hist(fannie_mae_sample$dti, xlab = "", ylab = "", main = "DTI histogram")
hist(fannie_mae_sample$balance, xlab = "", ylab = "", main = "Loan balance histogram")
# Plotting the distributions of the quantitative predictors
par(mfrow=c(2,2))
hist(fannie_mae_sample$borrower_score, xlab = "", ylab = "", main = "Borrower score histogram", col = "lightgrey")
hist(fannie_mae_sample$ltv, xlab = "", ylab = "", main = "LTV histogram", col = "lightgrey")
hist(fannie_mae_sample$dti, xlab = "", ylab = "", main = "DTI histogram", col = "lightgrey")
hist(fannie_mae_sample$balance, xlab = "", ylab = "", main = "Loan balance histogram", col = "lightgrey")
# Plotting the response as a function of the qualitative predictors
par(mfrow=c(2,2))
boxplot(fannie_mae_sample$interest ~ fannie_mae_sample$purpose, main = "Interest vs. loan purpose", sub = "C = Cash-out refi P = Purchase R = No-cash-out refi", col = "lightgrey"); grid()
boxplot(fannie_mae_sample$interest ~ fannie_mae_sample$property_type, main = "Interest vs. property type", sub = "SF = Single Family CO = Condo MH = Manufactured\n PU = Planned Urban Development CP = Co-op"); grid()
boxplot(fannie_mae_sample$interest ~ fannie_mae_sample$relocation, main = "Interest vs. relocation indicator"); grid()
boxplot(fannie_mae_sample$interest ~ fannie_mae_sample$first_time, main = "Interest vs. first-time buyer indicator"); grid()
# Plotting the response as a function of the qualitative predictors
par(mfrow=c(2,2))
boxplot(fannie_mae_sample$interest ~ fannie_mae_sample$purpose, main = "Interest vs. loan purpose", sub = "C = Cash-out refi P = Purchase R = No-cash-out refi", col = "lightgrey"); grid()
boxplot(fannie_mae_sample$interest ~ fannie_mae_sample$property_type, main = "Interest vs. property type", sub = "SF = Single Family CO = Condo MH = Manufactured\n PU = Planned Urban Development CP = Co-op", col = "lightgrey"); grid()
boxplot(fannie_mae_sample$interest ~ fannie_mae_sample$relocation, main = "Interest vs. relocation indicator", col = "lightgrey"); grid()
boxplot(fannie_mae_sample$interest ~ fannie_mae_sample$first_time, main = "Interest vs. first-time buyer indicator", col = "lightgrey"); grid()
# Plotting the distributions of the quantitative predictors
par(mfrow=c(2,2))
hist(fannie_mae_sample$borrower_score, xlab = "", ylab = "", main = "Borrower score histogram", col = "lightgrey"); grid()
hist(fannie_mae_sample$ltv, xlab = "", ylab = "", main = "LTV histogram", col = "lightgrey")
hist(fannie_mae_sample$dti, xlab = "", ylab = "", main = "DTI histogram", col = "lightgrey")
hist(fannie_mae_sample$balance, xlab = "", ylab = "", main = "Loan balance histogram", col = "lightgrey")
# Plotting the distributions of the quantitative predictors
par(mfrow=c(2,2))
hist(fannie_mae_sample$borrower_score, xlab = "", ylab = "", main = "Borrower score histogram", col = "lightgrey"); grid()
hist(fannie_mae_sample$ltv, xlab = "", ylab = "", main = "LTV histogram", col = "lightgrey"); grid()
hist(fannie_mae_sample$dti, xlab = "", ylab = "", main = "DTI histogram", col = "lightgrey"); grid()
hist(fannie_mae_sample$balance, xlab = "", ylab = "", main = "Loan balance histogram", col = "lightgrey"); grid()
library(caTools)
# set.seed(1000) # reproducibility
# split <- sample.split(th$Severity, SplitRatio = 0.7)
# mammo_data_train <- subset(mammo_data, split==TRUE)
# mammo_data_test <- subset(mammo_data, split==FALSE)
?sample.split
library(MASS)
data(cats)
cats
summary(cats)
thyroid <- read.csv("thyroid.dat", header = FALSE, skip = 26)
colnames(thyroid) <- c("age", "sex", "on_thyroxine", "query_on_thyroxine", "antithyroid_medication", "sick", "pregnant", "thyroid_surgery", "I131_treatment", "query_hypothyroid", "query_hyperthyroid", "lithium", "goitre", "tumor", "hypopituitary", "psych", "TSH", "T3", "TT4", "T4U", "FTI","class")
str(thyroid)
split <- sample.split(thyroid$class, SplitRatio = 0.7)
?split
data_split <- sample.split(thyroid$class, SplitRatio = 0.7)
?data_split
summary(data_split)
summary(thyroid$class)
table(thyroid$class)
thyroid_train <- subset(thyroid, split==TRUE)
table(thyroid_train$class)
6666*0.7
368*0.7
166*.7
?read.csv
thyroid <- read.csv("thyroid.dat", header = FALSE, skip = 26)
colnames(thyroid) <- c("age", "sex", "on_thyroxine", "query_on_thyroxine", "antithyroid_medication", "sick", "pregnant", "thyroid_surgery", "I131_treatment", "query_hypothyroid", "query_hyperthyroid", "lithium", "goitre", "tumor", "hypopituitary", "psych", "TSH", "T3", "TT4", "T4U", "FTI","class")
str(thyroid)
# Changle "class" to factor
thyroid$class <- factor(thyroid$class)
# Multiply "age" by 100
thyroid$age <- 100 * thyroid$age
library(caTools)
set.seed(1000) # reproducibility
split <- sample.split(thyroid$class, SplitRatio = 0.7)
thyroid_train <- subset(thyroid, split==TRUE)
thyroid_test <- subset(thyroid, split==FALSE)
library(rpart)
library(rpart.plot)
# Building a tree with a minimum of 10 observations on each leaf
thyroid_tree <- rpart(class ~ ., data = thyroid_train, control=rpart.control(minbucket=50))
prp(thyroid_tree)
# Building a tree with a minimum of 10 observations on each leaf
thyroid_tree <- rpart(class ~ ., data = thyroid_train, control=rpart.control(minbucket=10))
prp(thyroid_tree)
# Building a tree with a minimum of 10 observations on each leaf
thyroid_tree <- rpart(class ~ ., data = thyroid_train, control=rpart.control(minbucket=1))
prp(thyroid_tree)
table(thyroid$on_thyroxine)
table(thyroid$query_on_thyroxine)
table(thyroid$query_hypothyroid)
table(thyroid$query_hyperthyroid)
table(thyroid$antithyroid_medication)
table(thyroid$sick)
table(thyroid$pregnant)
table(thyroid$thyroid_surgery)
table(thyroid$I131_treatment)
table(thyroid$query_hypothyroid)
table(thyroid$query_hyperthyroid)
table(thyroid$lithium)
table(thyroid$goitre)
table(thyroid$tumor)
summary(thyroid)
thyroid <- read.csv("thyroid.dat", header = FALSE, skip = 26) # skipping the first 26 lines
colnames(thyroid) <- c("age", "sex", "on_thyroxine", "query_on_thyroxine", "antithyroid_medication", "sick", "pregnant", "thyroid_surgery", "I131_treatment", "query_hypothyroid", "query_hyperthyroid", "lithium", "goitre", "tumor", "hypopituitary", "psych", "TSH", "T3", "TT4", "T4U", "FTI","class")
str(thyroid)
# Changle "class" to factor
thyroid$class <- factor(thyroid$class)
# Multiply "age" by 100
thyroid$age <- 100 * thyroid$age
library(caTools)
set.seed(1000) # reproducibility
split <- sample.split(thyroid$class, SplitRatio = 0.7)
thyroid_train <- subset(thyroid, split==TRUE)
thyroid_test <- subset(thyroid, split==FALSE)
library(rpart)
library(rpart.plot)
# Building a tree with a minimum of 10 observations on each leaf
thyroid_tree <- rpart(class ~ ., data = thyroid_train, control=rpart.control(minbucket=1))
prp(thyroid_tree)
# Building a tree with a minimum of 10 observations on each leaf
thyroid_tree <- rpart(class ~ ., data = thyroid_train, control=rpart.control(minbucket=50))
prp(thyroid_tree)
# Generate predictions on training set
PredictCART_train = predict(thyroid_tree, type = "class")
# Confusion matrix of training set
conf_matrix_train <- table(thyroid_train$class, PredictCART_train)
conf_matrix_train
sum(diag(conf_matrix_train)) / sum(conf_matrix_train)
PredictCART_test = predict(thyroid_tree, newdata = thyroid_test, type = "class")
# Confusion matrix of test set
conf_matrix_test <- table(thyroid_test$class, PredictCART_test)
conf_matrix_test
sum(diag(conf_matrix_test)) / sum(conf_matrix_test)
library(caret)
library(e1071)
# Setting cross-validation to be 10-fold
fitControl = trainControl( method = "cv", number = 10 )
# Setting cp to .01, .02, ..., 0.5
cartGrid = expand.grid( .cp = (1:50)*0.01)
train(class ~ ., data = thyroid_train, method = "rpart", trControl = fitControl, tuneGrid = cartGrid)
thyroid_tree_cv <- rpart(class ~ ., data = thyroid_train, control=rpart.control(cp=0.03))
prp(thyroid_tree_cv)
# Generate predictions on training set
PredictCART_train_cv = predict(thyroid_tree_cv, type = "class")
# Confusion matrix of training set
conf_matrix_train_cv <- table(thyroid_train$class, PredictCART_train_cv)
conf_matrix_train_cv
# Generate predictions on training set
PredictCART_train_cv = predict(thyroid_tree_cv, type = "class")
# Confusion matrix of training set
conf_matrix_train_cv <- table(thyroid_train$class, PredictCART_train_cv)
conf_matrix_train_cv
sum(diag(conf_matrix_train_cv)) / sum(conf_matrix_train_cv)
# Generate predictions on test set using cross-validated set
PredictCART_test_cv = predict(thyroid_tree_cv, type = "class")
# Confusion matrix of training set
conf_matrix_test_cv <- table(thyroid_test$class, PredictCART_test_cv)
# Generate predictions on test set using cross-validated set
PredictCART_test_cv = predict(thyroid_tree_cv, newdat = thyroid_test, type = "class")
# Confusion matrix of training set
conf_matrix_test_cv <- table(thyroid_test$class, PredictCART_test_cv)
conf_matrix_test_cv
sum(diag(conf_matrix_test_cv)) / sum(conf_matrix_test_cv)
?plot
install.packages("jpeg")
library(jpeg)
setwd("~/")
img <- readJPEG(system.file("img", "999.jpg", package="jpeg"))
img <- readJPEG(system.file("img", "0999.jpg", package="jpeg"))
getcwd()
getwd()
img <- readJPEG(system.file("img", "0999.jpg", package="jpeg"))
img <- readJPEG(system.file("img", "0999.jpg", package="jpeg"))
img <- readJPEG(system.file("img", "0999.jpg", package="jpeg"))
?readJPEG
img <- readJPEG(system.file("img", "0999.JPG", package="jpeg"))
img <- readJPEG("0999.jpg")
str(img)
plot(img)
?clearNames
?clear
img <- readJPEG("0999_gray.jpg")
str(img)
img[1,1]
?dim
dim(img)
img[1,]
img[10,]
img[148,]
q()
getwd()
setwd("./Boricuas_NCAA/Season_Summary_2019_2020/Women")
setwd("../Maps")
source("arcs_map.r")
source("arcs_map.r")
source("arcs_map.r")
source("arcs_map.r")
?geom_path
df <- data.frame(
x = rep(x, 2),
y = c(qlogis(x), 2 * qlogis(x)),
group = rep(c("a","b"),
each = 100)
)
x <- seq(0.01, .99, length.out = 100)
df <- data.frame(
x = rep(x, 2),
y = c(qlogis(x), 2 * qlogis(x)),
group = rep(c("a","b"),
each = 100)
)
p <- ggplot(df, aes(x=x, y=y, group=group))
p
p + geom_line(linetype = 2)
p + geom_line(linetype = 1)
p + geom_line(aes(size = 2))
p + geom_line(aes(size = .2))
p + geom_line(aes(size = 0.2))
p + geom_line(aes(size = 1))
p + geom_line(aes(size = 5))
p
p + geom_line(aes(size = 5))
p + geom_line(size = 5)
p + geom_line(size = 1)
p + geom_line(size = 2)
p + geom_line(size = 8)
p + geom_line(size = 0.5)
vignette("ggplot2-specs")
p <- ggplot(usa_shp_mainland_and_pr) + geom_sf(color = "white", fill = "light gray") + theme_map()
p + geom_path(data = all_players_3_curves, aes(x=lon, y=lat, group=Player_Institution, color = Division, size = 0.5)) +
guides(color = guide_legend(nrow = 1, override.aes = list(size = 2))) +
scale_color_brewer(palette="Set1")
p + geom_path(data = all_players_3_curves, aes(x=lon, y=lat, group=Player_Institution, color = Division, size = 0.5)) +
guides(color = guide_legend(nrow = 1, override.aes = list(size = 2))) +
scale_color_brewer(palette="1Set1")
p + geom_path(data = all_players_3_curves, aes(x=lon, y=lat, group=Player_Institution, color = Division, size = 0.1)) +
guides(color = guide_legend(nrow = 1, override.aes = list(size = 2))) +
scale_color_brewer(palette="Set1")
p + geom_path(data = all_players_3_curves, aes(x=lon, y=lat, group=Player_Institution, color = Division, size = 0.2)) +
guides(color = guide_legend(nrow = 1, override.aes = list(size = 2))) +
scale_color_brewer(palette="Set1")
p + geom_path(data = all_players_3_curves, aes(x=lon, y=lat, group=Player_Institution, color = Division) +
guides(color = guide_legend(nrow = 1, override.aes = list(size = 2))) +
scale_color_brewer(palette="Set1")
)
p + geom_path(data = all_players_3_curves, aes(x=lon, y=lat, group=Player_Institution, color = Division)) +
guides(color = guide_legend(nrow = 1, override.aes = list(size = 2))) +
scale_color_brewer(palette="Set1")
p + geom_path(data = all_players_3_curves, aes(x=lon, y=lat, group=Player_Institution, color = Division), size = 1) +
guides(color = guide_legend(nrow = 1, override.aes = list(size = 2))) +
scale_color_brewer(palette="Set1")
p + geom_path(data = all_players_3_curves, aes(x=lon, y=lat, group=Player_Institution, color = Division), size = 0.2) +
guides(color = guide_legend(nrow = 1, override.aes = list(size = 2))) +
scale_color_brewer(palette="Set1")
p + geom_path(data = all_players_3_curves, aes(x=lon, y=lat, group=Player_Institution, color = Division), size = 0.05) +
guides(color = guide_legend(nrow = 1, override.aes = list(size = 2))) +
scale_color_brewer(palette="Set1")
p <- ggplot(usa_shp_mainland_and_pr) + geom_sf(color = "white", fill = "light gray") + theme_map() +
geom_path(data = all_players_3_curves, aes(x=lon, y=lat, group=Player_Institution, color = Division)) +
guides(color = guide_legend(nrow = 1, override.aes = list(size = 2))) +
scale_color_brewer(palette="Set1")
p + ggtitle(label = "Academic Year 2019-2020")
library(extrafont)
p + ggtitle(label = "Academic Year 2019-2020", family = "OLD SPORT 02 ATHLETIC NCV")
centroids
p + geom_text(x=-75, y=16, label="0.125", size = 14, family = "OLD SPORT 02 ATHLETIC NCV", color = "gold")
p + geom_text(x=-75, y=20, label="0.125", size = 14, family = "OLD SPORT 02 ATHLETIC NCV", color = "gold")
p + geom_text(x=-75, y=20, label="0.125", size = 14, family = "Asimov Print C", color = "gold")
p + geom_text(x=-75, y=20, label="0.125", size = 14, family = "Asimov", color = "gold")
fonts()
p + geom_text(x=-80, y=20, label="0.125", size = 14, family = "Playball", color = "gold")
p + geom_text(x=-100, y=20, label="0.125", size = 14, family = "Playball", color = "gold")
p + geom_text(x=-120, y=22, label="Each arc corresponds to a player and goes", size = 14, family = "Playball", color = "gold")
p + geom_text(x=-120, y=22, label="Each arc corresponds to a player and goes", size = 8, family = "Playball", color = "dodgerblue4")
p + geom_text(x=-120, y=22, label="Each arc corresponds to a player and goes", size = 5, family = "Playball", color = "dodgerblue4")
p + geom_text(x=-100, y=22, label="Each arc corresponds to a player and goes", size = 5, family = "Playball", color = "dodgerblue4")
p + geom_text(x=-100, y=22, label="Each arc corresponds to a player and goes", size = 5, family = "Deja Vu Sans", color = "dodgerblue4")
p + geom_text(x=-100, y=22, label="Each arc corresponds to a player and goes", size = 5, family = "DejaVu Sans", color = "dodgerblue4")
p + geom_text(x=-100, y=22, label="Each arc corresponds to a player and goes", size = 5, family = "Berlin Sans FB", color = "dodgerblue4")
p + geom_text(x=-100, y=22, label="Each arc corresponds to a player and goes", size = 5, family = "Berlin Sans FB Demi", color = "dodgerblue4")
p + geom_text(x=-100, y=22, label="Each arc corresponds to a player and goes", size = 4, family = "DejaVu Sans Mono", color = "dodgerblue4")
p + geom_text(x=-100, y=22, label="Each arc corresponds to a player and goes", size = 4, family = "DejaVu Sans Condensed", color = "dodgerblue4")
p + geom_text(x=-100, y=22, label="Each arc corresponds to a player and goes", size = 4, family = "DejaVu Sans Serif", color = "dodgerblue4")
p + geom_text(x=-100, y=22, label="Each arc corresponds to a player and goes", size = 4, family = "DejaVu Serif", color = "dodgerblue4")
p + geom_text(x=-100, y=22, label="Each arc corresponds to a player and goes", size = 4, family = "DejaVu Serif", color = "dodgerblue4")
p + geom_text(x=-100, y=22, label="Each arc corresponds to a player and goes", size = 4, family = "DejaVu", color = "dodgerblue4")
p + geom_text(x=-100, y=22, label="Each arc corresponds to a player and goes", size = 4, family = "DejaVu Sans", color = "dodgerblue4")
p + geom_text(x=-100, y=22, label="Each arc corresponds to a player and goes", size = 4, family = "DejaVu Sans", color = "dodgerblue4")
p + geom_text(x=-100, y=22, label="Each arc corresponds to a player and goes", size = 4, family = "DejaVu Sans Light", color = "dodgerblue4")
p + geom_text(x=-100, y=22, label="Each arc corresponds to a player and goes", size = 4, color = "dodgerblue4")
p + geom_text(x=-100, y=22, label="Each arc corresponds to a player and goes", size = 4, family = "Carlito", color = "dodgerblue4")
p + geom_text(x=-100, y=22, label="Each arc corresponds to a player and goes\nfrom her hometown to where she studies", size = 6, family = "Carlito", color = "dodgerblue4")
windowsFonts()
windowsFonts()
p + geom_text(x=-100, y=22, label="Each arc corresponds to a player and goes\nfrom her hometown to where she studies", size = 6, family = "Arial", color = "dodgerblue4")
data.frame(x1 = 2.62, x2 = 3.57, y1 = 21.0, y2 = 15.0)
line_df <- data.frame(x1 = -70, x2 = -67, y1 = 18.0, y2 = 18.0)
p + geom_text(x=-100, y=22, label="Each arc corresponds to a player and goes\nfrom her hometown to where she studies", size = 6, family = "Arial", color = "dodgerblue4") + geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2, colour = "segment"), data = line_df)
p + geom_text(x=-100, y=22, label="Each arc corresponds to a player and goes\nfrom her hometown to where she studies", size = 6, family = "Arial", color = "dodgerblue4") + geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2, colour = "blue"), data = line_df)
p + geom_text(x=-100, y=22, label="Each arc corresponds to a player and goes\nfrom her hometown to where she studies", size = 6, family = "Arial", color = "dodgerblue4") + geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2, colour = "green"), data = line_df)
p + geom_text(x=-100, y=22, label="Each arc corresponds to a player and goes\nfrom her hometown to where she studies", size = 6, family = "Arial", color = "dodgerblue4") + geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2), data = line_df)
centroids
line_df <- data.frame(x1 = -71, x2 = -68, y1 = 18.2, y2 = 18.2)
p + geom_text(x=-100, y=22, label="Each arc corresponds to a player and goes\nfrom her hometown to where she studies", size = 6, family = "Arial", color = "dodgerblue4") + geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2), data = line_df)
p + geom_text(x=-100, y=22, label="Each arc corresponds to a player and goes\nfrom her hometown to where she studies", size = 6, family = "Arial", color = "dodgerblue4") + geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2, color = "dodgerblue4"), data = line_df)
p + geom_text(x=-100, y=22, label="Each arc corresponds to a player and goes\nfrom her hometown to where she studies", size = 6, family = "Arial", color = "dodgerblue4") + geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2), data = line_df, arrow = arrow(type = "closed")
)
p + geom_text(x=-100, y=22, label="Each arc corresponds to a player and goes\nfrom her hometown to where she studies", size = 6, family = "Arial", color = "dodgerblue4") + geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2), data = line_df, arrow = arrow(unit(0.03, "npc"), type = "closed"))
p + geom_text(x=-100, y=22, label="Each arc corresponds to a player and goes\nfrom her hometown to where she studies", size = 6, family = "Arial", color = "dodgerblue4") + geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2), data = line_df, arrow = arrow(length = unit(0.05, "npc"), type = "closed"))
p + geom_text(x=-100, y=22, label="Each arc corresponds to a player and goes\nfrom her hometown to where she studies", size = 6, family = "Arial", color = "dodgerblue4") + geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2), data = line_df, arrow = arrow(length = unit(0.25, "npc"), type = "closed"))
p + geom_text(x=-100, y=22, label="Each arc corresponds to a player and goes\nfrom her hometown to where she studies", size = 6, family = "Arial", color = "dodgerblue4") + geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2), data = line_df, arrow = arrow(length = unit(0.025, "npc"), type = "closed"))
p + geom_text(x=-100, y=22, label="Each arc corresponds to a player and goes\nfrom her hometown to where she studies", size = 6, family = "Arial", color = "dodgerblue4") + geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2, color = "blue"), data = line_df, arrow = arrow(length = unit(0.025, "npc"), type = "closed"))
p + geom_text(x=-100, y=22, label="Each arc corresponds to a player and goes\nfrom her hometown to where she studies", size = 6, family = "Arial", color = "dodgerblue4") + geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2, colour = "blue"), data = line_df, arrow = arrow(length = unit(0.025, "npc"), type = "closed"))
p + geom_text(x=-100, y=22, label="Each arc corresponds to a player and goes\nfrom her hometown to where she studies", size = 6, family = "Arial", color = "dodgerblue4") + geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2, colour = "blue"), data = line_df, arrow = arrow(length = unit(0.02, "npc"), type = "closed"))
p + geom_text(x=-100, y=22, label="Each arc corresponds to a player and goes\nfrom her hometown to where she studies", size = 6, family = "Arial", color = "dodgerblue4") + geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2), colour = "blue", data = line_df, arrow = arrow(length = unit(0.02, "npc"), type = "closed"))
p + geom_text(x=-100, y=22, label="Each arc corresponds to a player and goes\nfrom her hometown to where she studies", size = 6, family = "Arial", color = "dodgerblue4") + geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2), colour = "dodgerblue4", data = line_df, arrow = arrow(length = unit(0.02, "npc"), type = "closed"))
fonts()
p + geom_text(x=-100, y=22, label="Each arc corresponds to a player and goes\nfrom her hometown to where she studies", size = 6, family = "Arial", color = "dodgerblue4") + geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2), colour = "blue", data = line_df, arrow = arrow(length = unit(0.02, "npc"), type = "closed")) + geom_text(x=-75, y=18.2, label="Puerto Rico", size = 4, family = "Arial", color = "dodgerblue4")
Hemmet Personal Use Only
p + geom_text(x=-100, y=22, label="Each arc corresponds to a player and goes\nfrom her hometown to where she studies", size = 6, family = "Arial", color = "dodgerblue4") + geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2), colour = "blue", data = line_df, arrow = arrow(length = unit(0.02, "npc"), type = "closed")) + geom_text(x=-75, y=18.2, label="Puerto Rico", size = 4, family = "Hemmet Personal Use Only", color = "dodgerblue4")
p + geom_text(x=-100, y=22, label="Each arc corresponds to a player and goes\nfrom her hometown to where she studies", size = 6, family = "Arial", color = "dodgerblue4") + geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2), colour = "blue", data = line_df, arrow = arrow(length = unit(0.02, "npc"), type = "closed")) + geom_text(x=-75, y=18.2, label="Puerto Rico", size = 4, family = "Playball", color = "dodgerblue4")
p + geom_text(x=-100, y=22, label="Each arc corresponds to a player and goes\nfrom her hometown to where she studies", size = 6, family = "Arial", color = "dodgerblue4") + geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2), colour = "blue", data = line_df, arrow = arrow(length = unit(0.02, "npc"), type = "closed")) + geom_text(x=-74, y=18.3, label="Puerto Rico", size = 4, family = "Playball", color = "dodgerblue4")
p + geom_text(x=-100, y=22, label="Each arc corresponds to a player and goes\nfrom her hometown to where she studies", size = 6, family = "Arial", color = "dodgerblue4") + geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2), colour = "blue", data = line_df, arrow = arrow(length = unit(0.02, "npc"), type = "closed")) + geom_text(x=-74, y=18.3, label="Puerto Rico", size = 4, family = "Arial", color = "dodgerblue4")
p + geom_text(x=-100, y=22, label="Each arc corresponds to a player and goes\nfrom her hometown to where she studies", size = 6, family = "Arial", color = "black") + geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2), colour = "black", data = line_df, arrow = arrow(length = unit(0.02, "npc"), type = "closed")) + geom_text(x=-74, y=18.3, label="Puerto Rico", size = 4, family = "Arial", color = "black")
p + geom_text(x=-100, y=22, label="NCAA DI NAIA NJCAA DII corresponds to a player and goes\nfrom her hometown to where she studies", size = 6, family = "Arial", color = "black") + geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2), colour = "black", data = line_df, arrow = arrow(length = unit(0.02, "npc"), type = "closed")) + geom_text(x=-74, y=18.3, label="Puerto Rico", size = 4, family = "Arial", color = "black")
source("arcs_map.r")
source("arcs_map.r")
p + theme(plot.title = element_text(hjust = 0, colour = "steelblue4", size = 14)) + ggtitle(label = "Puerto Rico Women Volleyball Players: Origins and Destinations")
p + theme(plot.title = element_text(hjust = 0.5, colour = "steelblue4", size = 20)) + ggtitle(label = "Puerto Rico Women Volleyball Players: Origins and Destinations")
p + theme(plot.title = element_text(hjust = 0.5, colour = "steelblue4", size = 20), plot.subtitle = element_text(hjust = 0.5, colour = "steelblue4", size = 14)  + ggtitle(label = "Puerto Rico Women Volleyball Players: Origins and Destinations")
)
p + theme(plot.title = element_text(hjust = 0.5, colour = "steelblue4", size = 20), plot.subtitle = element_text(hjust = 0.5, colour = "steelblue4", size = 14))  + ggtitle(label = "Puerto Rico Women Volleyball Players: Origins and Destinations")
p + theme(plot.title = element_text(hjust = 0.5, colour = "steelblue4", size = 20), plot.subtitle = element_text(hjust = 0.5, colour = "steelblue4", size = 14))  + ggtitle(label = "Puerto Rico Women Volleyball Players: Origins and Destinations", subtitle = "Academic Year 2019 - 2020")
p + theme(plot.title = element_text(hjust = 0.5, colour = "steelblue4", size = 20), plot.subtitle = element_text(hjust = 0.5, vjust = 5, colour = "steelblue4", size = 14))  + ggtitle(label = "Puerto Rico Women Volleyball Players: Origins and Destinations", subtitle = "Academic Year 2019 - 2020")
p + theme(plot.title = element_text(hjust = 0.5, colour = "steelblue4", size = 20), plot.subtitle = element_text(hjust = 0.5, vjust = -5, colour = "steelblue4", size = 14))  + ggtitle(label = "Puerto Rico Women Volleyball Players: Origins and Destinations", subtitle = "Academic Year 2019 - 2020")
p + theme(plot.title = element_text(hjust = 0.5, colour = "steelblue4", size = 20), plot.subtitle = element_text(hjust = 0.5, vjust = -10, colour = "steelblue4", size = 14))  + ggtitle(label = "Puerto Rico Women Volleyball Players: Origins and Destinations", subtitle = "Academic Year 2019 - 2020")
p + theme(plot.title = element_text(hjust = 0.5, colour = "steelblue4", size = 20), plot.subtitle = element_text(hjust = 0.5, vjust = -3, colour = "steelblue4", size = 14))  + ggtitle(label = "Puerto Rico Women Volleyball Players: Origins and Destinations", subtitle = "Academic Year 2019 - 2020")
p + theme(plot.title = element_text(hjust = 0.5, colour = "steelblue4", size = 20), plot.subtitle = element_text(hjust = 0.5, vjust = -2.5, colour = "steelblue4", size = 14))  + ggtitle(label = "Puerto Rico Women Volleyball Players: Origins and Destinations", subtitle = "Academic Year 2019 - 2020")
p + theme(plot.title = element_text(hjust = 0.5, colour = "steelblue4", size = 20), plot.subtitle = element_text(hjust = 0.5, vjust = -2, colour = "steelblue4", size = 14))  + ggtitle(label = "Puerto Rico Women Volleyball Players: Origins and Destinations", subtitle = "Academic Year 2019 - 2020")
p + theme(plot.title = element_text(hjust = 0.5, colour = "steelblue4", size = 20), plot.subtitle = element_text(hjust = 0.5, vjust = -1.5, colour = "steelblue4", size = 14))  + ggtitle(label = "Puerto Rico Women Volleyball Players: Origins and Destinations", subtitle = "Academic Year 2019 - 2020")
p + theme(plot.title = element_text(hjust = 0.5, colour = "steelblue4", size = 20), plot.subtitle = element_text(hjust = 0.5, vjust = -1, colour = "steelblue4", size = 14))  + ggtitle(label = "Puerto Rico Women Volleyball Players: Origins and Destinations", subtitle = "Academic Year 2019 - 2020")
p + theme(plot.title = element_text(hjust = 0.5, colour = "steelblue4", size = 20), plot.subtitle = element_text(hjust = 0.5, vjust = -1, colour = "steelblue4", size = 14), legend.position = c(-101, 47))  + ggtitle(label = "Puerto Rico Women Volleyball Players: Origins and Destinations", subtitle = "Academic Year 2019 - 2020")
p + theme(plot.title = element_text(hjust = 0.5, colour = "steelblue4", size = 20), plot.subtitle = element_text(hjust = 0.5, vjust = -1, colour = "steelblue4", size = 14), legend.position = c(-101, 49))  + ggtitle(label = "Puerto Rico Women Volleyball Players: Origins and Destinations", subtitle = "Academic Year 2019 - 2020")
p + theme(plot.title = element_text(hjust = 0.5, colour = "steelblue4", size = 20), plot.subtitle = element_text(hjust = 0.5, vjust = -1, colour = "steelblue4", size = 14), legend.position = c(-101, 30))  + ggtitle(label = "Puerto Rico Women Volleyball Players: Origins and Destinations", subtitle = "Academic Year 2019 - 2020")
p + theme(plot.title = element_text(hjust = 0.5, colour = "steelblue4", size = 20), plot.subtitle = element_text(hjust = 0.5, vjust = -1, colour = "steelblue4", size = 14), legend.position = "bottom")  + ggtitle(label = "Puerto Rico Women Volleyball Players: Origins and Destinations", subtitle = "Academic Year 2019 - 2020")
p + theme(plot.title = element_text(hjust = 0.5, colour = "steelblue4", size = 20), plot.subtitle = element_text(hjust = 0.5, vjust = -1, colour = "steelblue4", size = 14), legend.position = c(-100, 20))  + ggtitle(label = "Puerto Rico Women Volleyball Players: Origins and Destinations", subtitle = "Academic Year 2019 - 2020")
p + theme(plot.title = element_text(hjust = 0.5, colour = "steelblue4", size = 20), plot.subtitle = element_text(hjust = 0.5, vjust = -1, colour = "steelblue4", size = 14))  + ggtitle(label = "Puerto Rico Women Volleyball Players: Origins and Destinations", subtitle = "Academic Year 2019 - 2020") + scale_y_continuous(limits = c(16, 48))
p + theme(plot.title = element_text(hjust = 0.5, colour = "steelblue4", size = 20), plot.subtitle = element_text(hjust = 0.5, vjust = -1, colour = "steelblue4", size = 14))  + ggtitle(label = "Puerto Rico Women Volleyball Players: Origins and Destinations", subtitle = "Academic Year 2019 - 2020") + scale_y_continuous(limits = c(16, 45))
p + theme(plot.title = element_text(hjust = 0.5, colour = "steelblue4", size = 20), plot.subtitle = element_text(hjust = 0.5, vjust = -1, colour = "steelblue4", size = 14))  + ggtitle(label = "Puerto Rico Women Volleyball Players: Origins and Destinations", subtitle = "Academic Year 2019 - 2020")
p + theme(plot.title = element_text(hjust = 0.5, colour = "steelblue4", size = 20), plot.subtitle = element_text(hjust = 0.5, vjust = -1, colour = "steelblue4", size = 14))  + ggtitle(label = "Puerto Rico Women Volleyball Players: Origins and Destinations", subtitle = "Academic Year 2019 - 2020") + scale_y_continuous(limits = c(16, 48.5))
p + theme(plot.title = element_text(hjust = 0.5, colour = "steelblue4", size = 20), plot.subtitle = element_text(hjust = 0.5, vjust = -1, colour = "steelblue4", size = 14))  + ggtitle(label = "Puerto Rico Women Volleyball Players: Origins and Destinations", subtitle = "Academic Year 2019 - 2020") + scale_y_continuous(limits = c(17, 48.5))
p + theme(plot.title = element_text(hjust = 0.5, colour = "steelblue4", size = 20), plot.subtitle = element_text(hjust = 0.5, vjust = -1, colour = "steelblue4", size = 14), legend.position = c(0.5, 0.9))  + ggtitle(label = "Puerto Rico Women Volleyball Players: Origins and Destinations", subtitle = "Academic Year 2019 - 2020") + scale_y_continuous(limits = c(17, 48.5))
p + theme(plot.title = element_text(hjust = 0.5, colour = "steelblue4", size = 20), plot.subtitle = element_text(hjust = 0.5, vjust = -1, colour = "steelblue4", size = 14), legend.position = c(0.5, 1))  + ggtitle(label = "Puerto Rico Women Volleyball Players: Origins and Destinations", subtitle = "Academic Year 2019 - 2020") + scale_y_continuous(limits = c(17, 48.5))
p + theme(plot.title = element_text(hjust = 0.5, colour = "steelblue4", size = 20), plot.subtitle = element_text(hjust = 0.5, vjust = -1, colour = "steelblue4", size = 14), legend.position = c(0.5, 1))  + ggtitle(label = "Puerto Rico Women Volleyball Players: Origins and Destinations", subtitle = "Academic Year 2019 - 2020") )
p + theme(plot.title = element_text(hjust = 0.5, colour = "steelblue4", size = 20), plot.subtitle = element_text(hjust = 0.5, vjust = -1, colour = "steelblue4", size = 14), legend.position = c(0.5, 1))  + ggtitle(label = "Puerto Rico Women Volleyball Players: Origins and Destinations", subtitle = "Academic Year 2019 - 2020")
p + theme(plot.title = element_text(hjust = 0.5, colour = "steelblue4", size = 20), plot.subtitle = element_text(hjust = 0.5, vjust = -1, colour = "steelblue4", size = 14), legend.position = c(0.5, 0.95))  + ggtitle(label = "Puerto Rico Women Volleyball Players: Origins and Destinations", subtitle = "Academic Year 2019 - 2020")
p + theme(plot.title = element_text(hjust = 0.5, colour = "steelblue4", size = 20), plot.subtitle = element_text(hjust = 0.5, vjust = -1, colour = "steelblue4", size = 14), legend.position = c(0.5, 0.975))  + ggtitle(label = "Puerto Rico Women Volleyball Players: Origins and Destinations", subtitle = "Academic Year 2019 - 2020")
p + theme(plot.title = element_text(hjust = 0.5, colour = "steelblue4", size = 20), plot.subtitle = element_text(hjust = 0.5, vjust = -0.5, colour = "steelblue4", size = 14), legend.position = c(0.5, 0.975))  + ggtitle(label = "Puerto Rico Women Volleyball Players: Origins and Destinations", subtitle = "Academic Year 2019 - 2020")
fonts()
source("arcs_map.r")
p <- ggplot(usa_shp_mainland_and_pr) + geom_sf(color = "white", fill = "light gray") + theme_map() +
geom_path(data = all_players_3_curves, aes(x=lon, y=lat, group=Player_Institution, color = Division)) +
guides(color = guide_legend(nrow = 1, override.aes = list(size = 2))) +
scale_color_brewer(palette="Set1")
p + geom_text(x=-100, y=22, label="Each arc corresponds to a player and goes\nfrom her hometown to where she studies", size = 6, family = "Arial Narrow", color = "steelblue4")
p + geom_text(x=-100, y=22, label="Each arc corresponds to a player and goes\nfrom her hometown to where she studies", size = 6, family = "Bell MT", color = "steelblue4")
?geom_text
p + geom_label(x=-100, y=22, label="Each arc corresponds to a player and goes\nfrom her hometown to where she studies", size = 6, family = "Arial", color = "steelblue4")
p + geom_label(x=-100, y=22, label="Each arc corresponds to a player and goes\nfrom her hometown to where she studies", size = 6, family = "Arial", color = "steelblue4", label.size = NA)
p + geom_label(x=-100, y=22, label="Each arc corresponds to a player and goes\nfrom her hometown to where she studies", size = 5, family = "Arial", color = "steelblue4", label.size = NA)
p + geom_label(x=-100, y=22, label="Each arc corresponds to a player and goes\nfrom her hometown to where she studies", size = 5, family = "Arial", color = "steelblue4", label.size = NA) + geom_label(x=-74, y=18.4, label="Puerto Rico", size = 4, family = "Arial", color = "steelblue4", label.size = NA)
p + geom_label(x=-100, y=22, label="Each arc corresponds to a player and goes\nfrom her hometown to where she studies", size = 5, family = "Arial", color = "steelblue4", label.size = NA) + geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2), colour = "steelblue4", data = line_df, arrow = arrow(length = unit(0.02, "npc"), type = "closed")) +
geom_label(x=-74, y=18.4, label="Puerto Rico", size = 4, family = "Arial", color = "steelblue4", label.size = NA)
source("arcs_map.r")
source("arcs_map.r")
