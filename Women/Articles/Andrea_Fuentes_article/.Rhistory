# Plotting predictions and error bands
lines(score.grid, preds_lm_3_score$fit, col = color_blind_palette[3], lwd = 2)
matlines(score.grid, se_bands_lm_3_score, col = color_blind_palette[3], lty = 2)
# Quartic model plot
preds_lm_4_score <- predict(lm.fit.score.4, data.frame(borrower_score=score.grid), se = TRUE)# predictions
se_bands_lm_4_score <- cbind(preds_lm_4_score$fit + 2 * preds_lm_4_score$se, preds_lm_4_score$fit - 2 * preds_lm_4_score$se) # standard error bands
# Plotting predictions and error bands
lines(score.grid, preds_lm_4_score$fit, col = color_blind_palette[4], lwd = 2)
matlines(score.grid, se_bands_lm_4_score, col = color_blind_palette[4], lty = 2)
# Quintic model plot
preds_lm_5_score <- predict(lm.fit.score.5, data.frame(borrower_score=score.grid), se = TRUE)# predictions
se_bands_lm_5_score <- cbind(preds_lm_5_score$fit + 2 * preds_lm_5_score$se, preds_lm_5_score$fit - 2 * preds_lm_5_score$se) # standard error bands
# Plotting predictions and error bands
lines(score.grid, preds_lm_5_score$fit, col = color_blind_palette[5], lwd = 2)
matlines(score.grid, se_bands_lm_5_score, col = color_blind_palette[5], lty = 2)
# Legends
legend(x = "topleft", legend = c("linear", "quadratic"), lty=c(1,1), lwd = c(2.5,2.5), col = color_blind_palette[1:2])
legend(x = "bottomleft", legend = c("cubic", "quartic", "quintic"), inset = c(0.00, 0.0), lty=c(1,1,1), lwd = c(2.5,2.5,2.5), col = color_blind_palette[3:5])
lm.fit.balance.1 <- lm(interest ~ balance, data=fannie_mae_training)
lm.fit.balance.2 <- lm(interest ~ poly(balance, 2, raw = TRUE), data=fannie_mae_training)
lm.fit.balance.3 <- lm(interest ~ poly(balance, 3, raw = TRUE), data=fannie_mae_training)
lm.fit.balance.4 <- lm(interest ~ poly(balance, 4, raw = TRUE), data=fannie_mae_training)
lm.fit.balance.5 <- lm(interest ~ poly(balance, 5, raw = TRUE), data=fannie_mae_training)
anova(lm.fit.balance.1, lm.fit.balance.2, lm.fit.balance.3, lm.fit.balance.4, lm.fit.balance.5)
# Plotting interest versus original loan balance
plot(fannie_mae_sample$balance, fannie_mae_sample$interest, col = "darkgrey", ylab="Interest", xlab="Original loan balance", main = "Interest vs. original loan balance\n Fitting linear and non-linear models")
# Generating a vector of loan balance values for the various models
balance_lims <- range(fannie_mae_training$balance)
balance.grid <- seq(from = balance_lims[1], to = balance_lims[2], by = 1000)
# Linear model plot
preds_lm_1_balance <- predict(lm.fit.balance.1, data.frame(balance=balance.grid), se = TRUE) # predictions
se_bands_lm_1_balance <- cbind(preds_lm_1_balance$fit + 2 * preds_lm_1_balance$se, preds_lm_1_balance$fit - 2 * preds_lm_1_balance$se) # standard error bands
# Plotting predictions and error bands
lines(balance.grid, preds_lm_1_balance$fit, col = color_blind_palette[1], lwd = 2)
matlines(balance.grid, se_bands_lm_1_balance, col = color_blind_palette[1], lty = 2)
# Quadratic model plot
preds_lm_2_balance <- predict(lm.fit.balance.2, data.frame(balance=balance.grid), se = TRUE) # predictions
se_bands_lm_2_balance <- cbind(preds_lm_2_balance$fit + 2 * preds_lm_2_balance$se, preds_lm_2_balance$fit - 2 * preds_lm_2_balance$se) # standard error bands
# Plotting predictions and error bands
lines(balance.grid, preds_lm_2_balance$fit, col = color_blind_palette[2], lwd = 2)
matlines(balance.grid, se_bands_lm_2_balance, col = color_blind_palette[2], lty = 2)
# Cubic model plot
preds_lm_3_balance <- predict(lm.fit.balance.3, data.frame(balance=balance.grid), se = TRUE) # predictions
se_bands_lm_3_balance <- cbind(preds_lm_3_balance$fit + 2 * preds_lm_3_balance$se, preds_lm_3_balance$fit - 2 * preds_lm_3_balance$se) # standard error bands
# Plotting predictions and error bands
lines(balance.grid, preds_lm_3_balance$fit, col = color_blind_palette[3], lwd = 2)
matlines(balance.grid, se_bands_lm_3_balance, col = color_blind_palette[3], lty = 2)
# Quartic model plot
preds_lm_4_balance <- predict(lm.fit.balance.4, data.frame(balance=balance.grid), se = TRUE) # predictions
se_bands_lm_4_balance <- cbind(preds_lm_4_balance$fit + 2 * preds_lm_4_balance$se, preds_lm_4_balance$fit - 2 * preds_lm_4_balance$se) # standard error bands
# Plotting predictions and error bands
lines(balance.grid, preds_lm_4_balance$fit, col = color_blind_palette[4], lwd = 2)
matlines(balance.grid, se_bands_lm_4_balance, col = color_blind_palette[4], lty = 2)
# Quintic model plot
preds_lm_5_balance <- predict(lm.fit.balance.5, data.frame(balance=balance.grid), se = TRUE) # predictions
se_bands_lm_5_balance <- cbind(preds_lm_5_balance$fit + 2 * preds_lm_5_balance$se, preds_lm_5_balance$fit - 2 * preds_lm_5_balance$se) # standard error bands
# Plotting predictions and error bands
lines(balance.grid, preds_lm_5_balance$fit, col = color_blind_palette[5], lwd = 2)
matlines(balance.grid, se_bands_lm_5_balance, col = color_blind_palette[5], lty = 2)
# Legends
legend(x = "bottomright", inset = c(0.2, 0.0), legend = c("linear", "quadratic"), lty=c(1,1), lwd = c(2.5,2.5), col = color_blind_palette[1:2])
legend(x = "bottomright", legend = c("cubic", "quartic", "quintic"), inset = c(0.00, 0.0), lty=c(1,1,1), lwd = c(2.5,2.5,2.5), col = color_blind_palette[3:5])
lm.fit.non_linear <- lm(interest ~ poly(balance, 3, raw = TRUE) + poly(dti, 5, raw = TRUE) + poly(ltv, 5, raw = TRUE) + poly(borrower_score, 2, raw = TRUE) + poly(co_borrower_score, 3, raw = TRUE) + purpose + property_type + relocation + first_time, data = fannie_mae_training )
summary(lm.fit.non_linear)
# Predictions vector
predict_interest_test_nonlin <- predict(lm.fit.non_linear, newdata = fannie_mae_test)
# Compute RSS on test set
RSS_test_nonlin <- (fannie_mae_test$interest - predict_interest_test_nonlin)^2 %>% sum()
# TSS_test does not change
# Compute R_sqrd
R_sqrd_test_nonlin <- 1 - RSS_test_nonlin / TSS_test
# Compute RSS, R_sqrd, and MSE on training set
RSS_nonlin <- residuals(lm.fit.non_linear)^2 %>% sum()
R_sqrd_nonlin <- 1 - RSS_nonlin / TSS
MSE_nonlin <- RSS_nonlin / num_rows_training
# Compute MSE on test set
MSE_test_nonlin <- RSS_test_nonlin / num_rows_test
hist(fannie_mae_sample$dti, xlab = "", ylab = "", main = "DTI histogram", col = "red")
residuals(lm.fit.linear) %>% hist(col = "darkgrey")
residuals(lm.fit.linear) %>% hist(col = "darkgrey")
residuals(lm.fit.linear) %>% hist(col = "darkgrey")
legend(x = "topleft", legend = c("linear", "quadratic"))
residuals(lm.fit.linear) %>% hist(col = "darkgrey")
legend(x = "topleft", legend = c(paste("mean =", mean(residuals(lm.fit.linear)))))
residuals(lm.fit.linear) %>% hist(col = "darkgrey")
legend(x = "topleft", legend = c(paste("mean =", mean(residuals(lm.fit.linear)))))
grid()
residuals(lm.fit.linear) %>% hist(col = "darkgrey", main = "Histogram of linear model residuals")
legend(x = "topleft", legend = c(paste("mean =", mean(residuals(lm.fit.linear)))))
grid()
?round
residuals(lm.fit.linear) %>% hist(col = "darkgrey", main = "Histogram of linear model residuals")
legend(x = "topleft", legend = c(paste("mean =", mean(signif(residuals(lm.fit.linear))))))
grid()
residuals(lm.fit.linear) %>% hist(col = "darkgrey", main = "Histogram of linear model residuals")
legend(x = "topleft", legend = c(paste("mean =", mean(residuals(lm.fit.linear)))))
grid()
x2 <- pi * 100^(-1:3)
x2
round(x2,3)
signif(x2,3)
residuals(lm.fit.linear) %>% hist(col = "darkgrey", main = "Histogram of linear model residuals")
legend(x = "topleft", legend = c(paste("mean =", mean(signif(residuals(lm.fit.linear), 4)))))
grid()
residuals(lm.fit.linear) %>% hist(col = "darkgrey", main = "Histogram of linear model residuals")
legend(x = "topleft", legend = c(paste("mean =", mean(signif(residuals(lm.fit.linear), 2)))))
grid()
residuals(lm.fit.linear) %>% hist(col = "darkgrey", main = "Histogram of linear model residuals")
legend(x = "topleft", legend = c(paste("mean =", mean(residuals(lm.fit.linear)))))
grid()
residuals(lm.fit.linear) %>% hist(col = "darkgrey", main = "Histogram of linear model residuals")
legend(x = "topleft", legend = c(paste("mean =", signif(mean(residuals(lm.fit.linear))))))
grid()
residuals(lm.fit.linear) %>% hist(col = "lightgrey", main = "Histogram of linear model residuals")
legend(x = "topleft", legend = c(paste("mean =", signif(mean(residuals(lm.fit.linear))))))
grid()
residuals(lm.fit.linear) %>% hist(col = "lightgrey", main = "Histogram of linear model residuals", xlab = "Residuals of linear model")
legend(x = "topleft", legend = c(paste("mean =", signif(mean(residuals(lm.fit.linear))))))
grid()
library(lmtest)
bptest.linear <- bptest(lm.fit.linear)
bptest.linear
summary(bptest.linear)
str(bptest.linear)
bptest.linear$statistic
bptest.linear$parameter
# Performing the auxiliary regression for the BP test
lm.fit.linear.residuals.squared <- lm(linear_model_residuals^2 ~ balance + dti + ltv + borrower_score + co_borrower_score + purpose + property_type + relocation + first_time, data = fannie_mae_training)
# Computing the test statistic
R_aux_sqrd <- summary(lm.fit.linear.residuals.squared)$r.squared
BP_test_statistic <- length(linear_model_residuals) * R_aux_sqrd
pchisq(BP_test_statistic, df = 13, lower.tail = FALSE)
# Plotting the distributions of the quantitative predictors
par(mfrow=c(2,2))
hist(fannie_mae_sample$borrower_score, xlab = "", ylab = "", main = "Borrower score histogram", col = "lightgrey")
hist(fannie_mae_sample$ltv, xlab = "", ylab = "", main = "LTV histogram")
hist(fannie_mae_sample$dti, xlab = "", ylab = "", main = "DTI histogram")
hist(fannie_mae_sample$balance, xlab = "", ylab = "", main = "Loan balance histogram")
# Plotting the distributions of the quantitative predictors
par(mfrow=c(2,2))
hist(fannie_mae_sample$borrower_score, xlab = "", ylab = "", main = "Borrower score histogram", col = "lightgrey")
hist(fannie_mae_sample$ltv, xlab = "", ylab = "", main = "LTV histogram", col = "lightgrey")
hist(fannie_mae_sample$dti, xlab = "", ylab = "", main = "DTI histogram", col = "lightgrey")
hist(fannie_mae_sample$balance, xlab = "", ylab = "", main = "Loan balance histogram", col = "lightgrey")
# Plotting the response as a function of the qualitative predictors
par(mfrow=c(2,2))
boxplot(fannie_mae_sample$interest ~ fannie_mae_sample$purpose, main = "Interest vs. loan purpose", sub = "C = Cash-out refi P = Purchase R = No-cash-out refi", col = "lightgrey"); grid()
boxplot(fannie_mae_sample$interest ~ fannie_mae_sample$property_type, main = "Interest vs. property type", sub = "SF = Single Family CO = Condo MH = Manufactured\n PU = Planned Urban Development CP = Co-op"); grid()
boxplot(fannie_mae_sample$interest ~ fannie_mae_sample$relocation, main = "Interest vs. relocation indicator"); grid()
boxplot(fannie_mae_sample$interest ~ fannie_mae_sample$first_time, main = "Interest vs. first-time buyer indicator"); grid()
# Plotting the response as a function of the qualitative predictors
par(mfrow=c(2,2))
boxplot(fannie_mae_sample$interest ~ fannie_mae_sample$purpose, main = "Interest vs. loan purpose", sub = "C = Cash-out refi P = Purchase R = No-cash-out refi", col = "lightgrey"); grid()
boxplot(fannie_mae_sample$interest ~ fannie_mae_sample$property_type, main = "Interest vs. property type", sub = "SF = Single Family CO = Condo MH = Manufactured\n PU = Planned Urban Development CP = Co-op", col = "lightgrey"); grid()
boxplot(fannie_mae_sample$interest ~ fannie_mae_sample$relocation, main = "Interest vs. relocation indicator", col = "lightgrey"); grid()
boxplot(fannie_mae_sample$interest ~ fannie_mae_sample$first_time, main = "Interest vs. first-time buyer indicator", col = "lightgrey"); grid()
# Plotting the distributions of the quantitative predictors
par(mfrow=c(2,2))
hist(fannie_mae_sample$borrower_score, xlab = "", ylab = "", main = "Borrower score histogram", col = "lightgrey"); grid()
hist(fannie_mae_sample$ltv, xlab = "", ylab = "", main = "LTV histogram", col = "lightgrey")
hist(fannie_mae_sample$dti, xlab = "", ylab = "", main = "DTI histogram", col = "lightgrey")
hist(fannie_mae_sample$balance, xlab = "", ylab = "", main = "Loan balance histogram", col = "lightgrey")
# Plotting the distributions of the quantitative predictors
par(mfrow=c(2,2))
hist(fannie_mae_sample$borrower_score, xlab = "", ylab = "", main = "Borrower score histogram", col = "lightgrey"); grid()
hist(fannie_mae_sample$ltv, xlab = "", ylab = "", main = "LTV histogram", col = "lightgrey"); grid()
hist(fannie_mae_sample$dti, xlab = "", ylab = "", main = "DTI histogram", col = "lightgrey"); grid()
hist(fannie_mae_sample$balance, xlab = "", ylab = "", main = "Loan balance histogram", col = "lightgrey"); grid()
library(caTools)
# set.seed(1000) # reproducibility
# split <- sample.split(th$Severity, SplitRatio = 0.7)
# mammo_data_train <- subset(mammo_data, split==TRUE)
# mammo_data_test <- subset(mammo_data, split==FALSE)
?sample.split
library(MASS)
data(cats)
cats
summary(cats)
thyroid <- read.csv("thyroid.dat", header = FALSE, skip = 26)
colnames(thyroid) <- c("age", "sex", "on_thyroxine", "query_on_thyroxine", "antithyroid_medication", "sick", "pregnant", "thyroid_surgery", "I131_treatment", "query_hypothyroid", "query_hyperthyroid", "lithium", "goitre", "tumor", "hypopituitary", "psych", "TSH", "T3", "TT4", "T4U", "FTI","class")
str(thyroid)
split <- sample.split(thyroid$class, SplitRatio = 0.7)
?split
data_split <- sample.split(thyroid$class, SplitRatio = 0.7)
?data_split
summary(data_split)
summary(thyroid$class)
table(thyroid$class)
thyroid_train <- subset(thyroid, split==TRUE)
table(thyroid_train$class)
6666*0.7
368*0.7
166*.7
?read.csv
thyroid <- read.csv("thyroid.dat", header = FALSE, skip = 26)
colnames(thyroid) <- c("age", "sex", "on_thyroxine", "query_on_thyroxine", "antithyroid_medication", "sick", "pregnant", "thyroid_surgery", "I131_treatment", "query_hypothyroid", "query_hyperthyroid", "lithium", "goitre", "tumor", "hypopituitary", "psych", "TSH", "T3", "TT4", "T4U", "FTI","class")
str(thyroid)
# Changle "class" to factor
thyroid$class <- factor(thyroid$class)
# Multiply "age" by 100
thyroid$age <- 100 * thyroid$age
library(caTools)
set.seed(1000) # reproducibility
split <- sample.split(thyroid$class, SplitRatio = 0.7)
thyroid_train <- subset(thyroid, split==TRUE)
thyroid_test <- subset(thyroid, split==FALSE)
library(rpart)
library(rpart.plot)
# Building a tree with a minimum of 10 observations on each leaf
thyroid_tree <- rpart(class ~ ., data = thyroid_train, control=rpart.control(minbucket=50))
prp(thyroid_tree)
# Building a tree with a minimum of 10 observations on each leaf
thyroid_tree <- rpart(class ~ ., data = thyroid_train, control=rpart.control(minbucket=10))
prp(thyroid_tree)
# Building a tree with a minimum of 10 observations on each leaf
thyroid_tree <- rpart(class ~ ., data = thyroid_train, control=rpart.control(minbucket=1))
prp(thyroid_tree)
table(thyroid$on_thyroxine)
table(thyroid$query_on_thyroxine)
table(thyroid$query_hypothyroid)
table(thyroid$query_hyperthyroid)
table(thyroid$antithyroid_medication)
table(thyroid$sick)
table(thyroid$pregnant)
table(thyroid$thyroid_surgery)
table(thyroid$I131_treatment)
table(thyroid$query_hypothyroid)
table(thyroid$query_hyperthyroid)
table(thyroid$lithium)
table(thyroid$goitre)
table(thyroid$tumor)
summary(thyroid)
thyroid <- read.csv("thyroid.dat", header = FALSE, skip = 26) # skipping the first 26 lines
colnames(thyroid) <- c("age", "sex", "on_thyroxine", "query_on_thyroxine", "antithyroid_medication", "sick", "pregnant", "thyroid_surgery", "I131_treatment", "query_hypothyroid", "query_hyperthyroid", "lithium", "goitre", "tumor", "hypopituitary", "psych", "TSH", "T3", "TT4", "T4U", "FTI","class")
str(thyroid)
# Changle "class" to factor
thyroid$class <- factor(thyroid$class)
# Multiply "age" by 100
thyroid$age <- 100 * thyroid$age
library(caTools)
set.seed(1000) # reproducibility
split <- sample.split(thyroid$class, SplitRatio = 0.7)
thyroid_train <- subset(thyroid, split==TRUE)
thyroid_test <- subset(thyroid, split==FALSE)
library(rpart)
library(rpart.plot)
# Building a tree with a minimum of 10 observations on each leaf
thyroid_tree <- rpart(class ~ ., data = thyroid_train, control=rpart.control(minbucket=1))
prp(thyroid_tree)
# Building a tree with a minimum of 10 observations on each leaf
thyroid_tree <- rpart(class ~ ., data = thyroid_train, control=rpart.control(minbucket=50))
prp(thyroid_tree)
# Generate predictions on training set
PredictCART_train = predict(thyroid_tree, type = "class")
# Confusion matrix of training set
conf_matrix_train <- table(thyroid_train$class, PredictCART_train)
conf_matrix_train
sum(diag(conf_matrix_train)) / sum(conf_matrix_train)
PredictCART_test = predict(thyroid_tree, newdata = thyroid_test, type = "class")
# Confusion matrix of test set
conf_matrix_test <- table(thyroid_test$class, PredictCART_test)
conf_matrix_test
sum(diag(conf_matrix_test)) / sum(conf_matrix_test)
library(caret)
library(e1071)
# Setting cross-validation to be 10-fold
fitControl = trainControl( method = "cv", number = 10 )
# Setting cp to .01, .02, ..., 0.5
cartGrid = expand.grid( .cp = (1:50)*0.01)
train(class ~ ., data = thyroid_train, method = "rpart", trControl = fitControl, tuneGrid = cartGrid)
thyroid_tree_cv <- rpart(class ~ ., data = thyroid_train, control=rpart.control(cp=0.03))
prp(thyroid_tree_cv)
# Generate predictions on training set
PredictCART_train_cv = predict(thyroid_tree_cv, type = "class")
# Confusion matrix of training set
conf_matrix_train_cv <- table(thyroid_train$class, PredictCART_train_cv)
conf_matrix_train_cv
# Generate predictions on training set
PredictCART_train_cv = predict(thyroid_tree_cv, type = "class")
# Confusion matrix of training set
conf_matrix_train_cv <- table(thyroid_train$class, PredictCART_train_cv)
conf_matrix_train_cv
sum(diag(conf_matrix_train_cv)) / sum(conf_matrix_train_cv)
# Generate predictions on test set using cross-validated set
PredictCART_test_cv = predict(thyroid_tree_cv, type = "class")
# Confusion matrix of training set
conf_matrix_test_cv <- table(thyroid_test$class, PredictCART_test_cv)
# Generate predictions on test set using cross-validated set
PredictCART_test_cv = predict(thyroid_tree_cv, newdat = thyroid_test, type = "class")
# Confusion matrix of training set
conf_matrix_test_cv <- table(thyroid_test$class, PredictCART_test_cv)
conf_matrix_test_cv
sum(diag(conf_matrix_test_cv)) / sum(conf_matrix_test_cv)
?plot
install.packages("jpeg")
library(jpeg)
setwd("~/")
img <- readJPEG(system.file("img", "999.jpg", package="jpeg"))
img <- readJPEG(system.file("img", "0999.jpg", package="jpeg"))
getcwd()
getwd()
img <- readJPEG(system.file("img", "0999.jpg", package="jpeg"))
img <- readJPEG(system.file("img", "0999.jpg", package="jpeg"))
img <- readJPEG(system.file("img", "0999.jpg", package="jpeg"))
?readJPEG
img <- readJPEG(system.file("img", "0999.JPG", package="jpeg"))
img <- readJPEG("0999.jpg")
str(img)
plot(img)
?clearNames
?clear
img <- readJPEG("0999_gray.jpg")
str(img)
img[1,1]
?dim
dim(img)
img[1,]
img[10,]
img[148,]
q()
library(wordcloud2)
figPath = system.file("examples/t.png",package = "wordcloud2")
wordcloud2(demoFreq, figPath = figPath, size = 1.5,color = "skyblue")
wordcloud2(demoFreq, figPath = figPath, size = 1.5,color = "skyblue")
library(devtools)
devtools::install_github("lchiffon/wordcloud2")
library(wordcloud2)
wordcloud2(demoFreq, figPath = figPath, size = 1.5,color = "skyblue")
figPath = system.file("examples/t.png",package = "wordcloud2")
wordcloud2(demoFreq, figPath = figPath, size = 1.5,color = "skyblue")
source("./Boricuas_NCAA/Season_Summary_2019_2020/Women/Articles/Andrea_Fuentes_article/")
setwd("./Boricuas_NCAA/Season_Summary_2019_2020/Women/Articles/Andrea_Fuentes_article/")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
?legend.position
?legend
?legend
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("hitting.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
missouri_df
missouri_df$Period
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
missouri_df$Period
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
?position_dodge
?position_dodge
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
source("Mizzou_seasons_barplot.r")
exit
