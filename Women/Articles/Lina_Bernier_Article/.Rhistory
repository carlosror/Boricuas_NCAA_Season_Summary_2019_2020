preds_lm_2_balance <- predict(lm.fit.balance.2, data.frame(balance=balance.grid), se = TRUE) # predictions
se_bands_lm_2_balance <- cbind(preds_lm_2_balance$fit + 2 * preds_lm_2_balance$se, preds_lm_2_balance$fit - 2 * preds_lm_2_balance$se) # standard error bands
# Plotting predictions and error bands
lines(balance.grid, preds_lm_2_balance$fit, col = color_blind_palette[2], lwd = 2)
matlines(balance.grid, se_bands_lm_2_balance, col = color_blind_palette[2], lty = 2)
# Cubic model plot
preds_lm_3_balance <- predict(lm.fit.balance.3, data.frame(balance=balance.grid), se = TRUE) # predictions
se_bands_lm_3_balance <- cbind(preds_lm_3_balance$fit + 2 * preds_lm_3_balance$se, preds_lm_3_balance$fit - 2 * preds_lm_3_balance$se) # standard error bands
# Plotting predictions and error bands
lines(balance.grid, preds_lm_3_balance$fit, col = color_blind_palette[3], lwd = 2)
matlines(balance.grid, se_bands_lm_3_balance, col = color_blind_palette[3], lty = 2)
# Quartic model plot
preds_lm_4_balance <- predict(lm.fit.balance.4, data.frame(balance=balance.grid), se = TRUE) # predictions
se_bands_lm_4_balance <- cbind(preds_lm_4_balance$fit + 2 * preds_lm_4_balance$se, preds_lm_4_balance$fit - 2 * preds_lm_4_balance$se) # standard error bands
# Plotting predictions and error bands
lines(balance.grid, preds_lm_4_balance$fit, col = color_blind_palette[4], lwd = 2)
matlines(balance.grid, se_bands_lm_4_balance, col = color_blind_palette[4], lty = 2)
# Quintic model plot
preds_lm_5_balance <- predict(lm.fit.balance.5, data.frame(balance=balance.grid), se = TRUE) # predictions
se_bands_lm_5_balance <- cbind(preds_lm_5_balance$fit + 2 * preds_lm_5_balance$se, preds_lm_5_balance$fit - 2 * preds_lm_5_balance$se) # standard error bands
# Plotting predictions and error bands
lines(balance.grid, preds_lm_5_balance$fit, col = color_blind_palette[5], lwd = 2)
matlines(balance.grid, se_bands_lm_5_balance, col = color_blind_palette[5], lty = 2)
# Legends
legend(x = "bottomright", inset = c(0.2, 0.0), legend = c("linear", "quadratic"), lty=c(1,1), lwd = c(2.5,2.5), col = color_blind_palette[1:2])
legend(x = "bottomright", legend = c("cubic", "quartic", "quintic"), inset = c(0.00, 0.0), lty=c(1,1,1), lwd = c(2.5,2.5,2.5), col = color_blind_palette[3:5])
lm.fit.non_linear <- lm(interest ~ poly(balance, 3, raw = TRUE) + poly(dti, 5, raw = TRUE) + poly(ltv, 5, raw = TRUE) + poly(borrower_score, 2, raw = TRUE) + poly(co_borrower_score, 3, raw = TRUE) + purpose + property_type + relocation + first_time, data = fannie_mae_training )
summary(lm.fit.non_linear)
# Predictions vector
predict_interest_test_nonlin <- predict(lm.fit.non_linear, newdata = fannie_mae_test)
# Compute RSS on test set
RSS_test_nonlin <- (fannie_mae_test$interest - predict_interest_test_nonlin)^2 %>% sum()
# TSS_test does not change
# Compute R_sqrd
R_sqrd_test_nonlin <- 1 - RSS_test_nonlin / TSS_test
# Compute RSS, R_sqrd, and MSE on training set
RSS_nonlin <- residuals(lm.fit.non_linear)^2 %>% sum()
R_sqrd_nonlin <- 1 - RSS_nonlin / TSS
MSE_nonlin <- RSS_nonlin / num_rows_training
# Compute MSE on test set
MSE_test_nonlin <- RSS_test_nonlin / num_rows_test
hist(fannie_mae_sample$dti, xlab = "", ylab = "", main = "DTI histogram", col = "red")
residuals(lm.fit.linear) %>% hist(col = "darkgrey")
residuals(lm.fit.linear) %>% hist(col = "darkgrey")
residuals(lm.fit.linear) %>% hist(col = "darkgrey")
legend(x = "topleft", legend = c("linear", "quadratic"))
residuals(lm.fit.linear) %>% hist(col = "darkgrey")
legend(x = "topleft", legend = c(paste("mean =", mean(residuals(lm.fit.linear)))))
residuals(lm.fit.linear) %>% hist(col = "darkgrey")
legend(x = "topleft", legend = c(paste("mean =", mean(residuals(lm.fit.linear)))))
grid()
residuals(lm.fit.linear) %>% hist(col = "darkgrey", main = "Histogram of linear model residuals")
legend(x = "topleft", legend = c(paste("mean =", mean(residuals(lm.fit.linear)))))
grid()
?round
residuals(lm.fit.linear) %>% hist(col = "darkgrey", main = "Histogram of linear model residuals")
legend(x = "topleft", legend = c(paste("mean =", mean(signif(residuals(lm.fit.linear))))))
grid()
residuals(lm.fit.linear) %>% hist(col = "darkgrey", main = "Histogram of linear model residuals")
legend(x = "topleft", legend = c(paste("mean =", mean(residuals(lm.fit.linear)))))
grid()
x2 <- pi * 100^(-1:3)
x2
round(x2,3)
signif(x2,3)
residuals(lm.fit.linear) %>% hist(col = "darkgrey", main = "Histogram of linear model residuals")
legend(x = "topleft", legend = c(paste("mean =", mean(signif(residuals(lm.fit.linear), 4)))))
grid()
residuals(lm.fit.linear) %>% hist(col = "darkgrey", main = "Histogram of linear model residuals")
legend(x = "topleft", legend = c(paste("mean =", mean(signif(residuals(lm.fit.linear), 2)))))
grid()
residuals(lm.fit.linear) %>% hist(col = "darkgrey", main = "Histogram of linear model residuals")
legend(x = "topleft", legend = c(paste("mean =", mean(residuals(lm.fit.linear)))))
grid()
residuals(lm.fit.linear) %>% hist(col = "darkgrey", main = "Histogram of linear model residuals")
legend(x = "topleft", legend = c(paste("mean =", signif(mean(residuals(lm.fit.linear))))))
grid()
residuals(lm.fit.linear) %>% hist(col = "lightgrey", main = "Histogram of linear model residuals")
legend(x = "topleft", legend = c(paste("mean =", signif(mean(residuals(lm.fit.linear))))))
grid()
residuals(lm.fit.linear) %>% hist(col = "lightgrey", main = "Histogram of linear model residuals", xlab = "Residuals of linear model")
legend(x = "topleft", legend = c(paste("mean =", signif(mean(residuals(lm.fit.linear))))))
grid()
library(lmtest)
bptest.linear <- bptest(lm.fit.linear)
bptest.linear
summary(bptest.linear)
str(bptest.linear)
bptest.linear$statistic
bptest.linear$parameter
# Performing the auxiliary regression for the BP test
lm.fit.linear.residuals.squared <- lm(linear_model_residuals^2 ~ balance + dti + ltv + borrower_score + co_borrower_score + purpose + property_type + relocation + first_time, data = fannie_mae_training)
# Computing the test statistic
R_aux_sqrd <- summary(lm.fit.linear.residuals.squared)$r.squared
BP_test_statistic <- length(linear_model_residuals) * R_aux_sqrd
pchisq(BP_test_statistic, df = 13, lower.tail = FALSE)
# Plotting the distributions of the quantitative predictors
par(mfrow=c(2,2))
hist(fannie_mae_sample$borrower_score, xlab = "", ylab = "", main = "Borrower score histogram", col = "lightgrey")
hist(fannie_mae_sample$ltv, xlab = "", ylab = "", main = "LTV histogram")
hist(fannie_mae_sample$dti, xlab = "", ylab = "", main = "DTI histogram")
hist(fannie_mae_sample$balance, xlab = "", ylab = "", main = "Loan balance histogram")
# Plotting the distributions of the quantitative predictors
par(mfrow=c(2,2))
hist(fannie_mae_sample$borrower_score, xlab = "", ylab = "", main = "Borrower score histogram", col = "lightgrey")
hist(fannie_mae_sample$ltv, xlab = "", ylab = "", main = "LTV histogram", col = "lightgrey")
hist(fannie_mae_sample$dti, xlab = "", ylab = "", main = "DTI histogram", col = "lightgrey")
hist(fannie_mae_sample$balance, xlab = "", ylab = "", main = "Loan balance histogram", col = "lightgrey")
# Plotting the response as a function of the qualitative predictors
par(mfrow=c(2,2))
boxplot(fannie_mae_sample$interest ~ fannie_mae_sample$purpose, main = "Interest vs. loan purpose", sub = "C = Cash-out refi P = Purchase R = No-cash-out refi", col = "lightgrey"); grid()
boxplot(fannie_mae_sample$interest ~ fannie_mae_sample$property_type, main = "Interest vs. property type", sub = "SF = Single Family CO = Condo MH = Manufactured\n PU = Planned Urban Development CP = Co-op"); grid()
boxplot(fannie_mae_sample$interest ~ fannie_mae_sample$relocation, main = "Interest vs. relocation indicator"); grid()
boxplot(fannie_mae_sample$interest ~ fannie_mae_sample$first_time, main = "Interest vs. first-time buyer indicator"); grid()
# Plotting the response as a function of the qualitative predictors
par(mfrow=c(2,2))
boxplot(fannie_mae_sample$interest ~ fannie_mae_sample$purpose, main = "Interest vs. loan purpose", sub = "C = Cash-out refi P = Purchase R = No-cash-out refi", col = "lightgrey"); grid()
boxplot(fannie_mae_sample$interest ~ fannie_mae_sample$property_type, main = "Interest vs. property type", sub = "SF = Single Family CO = Condo MH = Manufactured\n PU = Planned Urban Development CP = Co-op", col = "lightgrey"); grid()
boxplot(fannie_mae_sample$interest ~ fannie_mae_sample$relocation, main = "Interest vs. relocation indicator", col = "lightgrey"); grid()
boxplot(fannie_mae_sample$interest ~ fannie_mae_sample$first_time, main = "Interest vs. first-time buyer indicator", col = "lightgrey"); grid()
# Plotting the distributions of the quantitative predictors
par(mfrow=c(2,2))
hist(fannie_mae_sample$borrower_score, xlab = "", ylab = "", main = "Borrower score histogram", col = "lightgrey"); grid()
hist(fannie_mae_sample$ltv, xlab = "", ylab = "", main = "LTV histogram", col = "lightgrey")
hist(fannie_mae_sample$dti, xlab = "", ylab = "", main = "DTI histogram", col = "lightgrey")
hist(fannie_mae_sample$balance, xlab = "", ylab = "", main = "Loan balance histogram", col = "lightgrey")
# Plotting the distributions of the quantitative predictors
par(mfrow=c(2,2))
hist(fannie_mae_sample$borrower_score, xlab = "", ylab = "", main = "Borrower score histogram", col = "lightgrey"); grid()
hist(fannie_mae_sample$ltv, xlab = "", ylab = "", main = "LTV histogram", col = "lightgrey"); grid()
hist(fannie_mae_sample$dti, xlab = "", ylab = "", main = "DTI histogram", col = "lightgrey"); grid()
hist(fannie_mae_sample$balance, xlab = "", ylab = "", main = "Loan balance histogram", col = "lightgrey"); grid()
library(caTools)
# set.seed(1000) # reproducibility
# split <- sample.split(th$Severity, SplitRatio = 0.7)
# mammo_data_train <- subset(mammo_data, split==TRUE)
# mammo_data_test <- subset(mammo_data, split==FALSE)
?sample.split
library(MASS)
data(cats)
cats
summary(cats)
thyroid <- read.csv("thyroid.dat", header = FALSE, skip = 26)
colnames(thyroid) <- c("age", "sex", "on_thyroxine", "query_on_thyroxine", "antithyroid_medication", "sick", "pregnant", "thyroid_surgery", "I131_treatment", "query_hypothyroid", "query_hyperthyroid", "lithium", "goitre", "tumor", "hypopituitary", "psych", "TSH", "T3", "TT4", "T4U", "FTI","class")
str(thyroid)
split <- sample.split(thyroid$class, SplitRatio = 0.7)
?split
data_split <- sample.split(thyroid$class, SplitRatio = 0.7)
?data_split
summary(data_split)
summary(thyroid$class)
table(thyroid$class)
thyroid_train <- subset(thyroid, split==TRUE)
table(thyroid_train$class)
6666*0.7
368*0.7
166*.7
?read.csv
thyroid <- read.csv("thyroid.dat", header = FALSE, skip = 26)
colnames(thyroid) <- c("age", "sex", "on_thyroxine", "query_on_thyroxine", "antithyroid_medication", "sick", "pregnant", "thyroid_surgery", "I131_treatment", "query_hypothyroid", "query_hyperthyroid", "lithium", "goitre", "tumor", "hypopituitary", "psych", "TSH", "T3", "TT4", "T4U", "FTI","class")
str(thyroid)
# Changle "class" to factor
thyroid$class <- factor(thyroid$class)
# Multiply "age" by 100
thyroid$age <- 100 * thyroid$age
library(caTools)
set.seed(1000) # reproducibility
split <- sample.split(thyroid$class, SplitRatio = 0.7)
thyroid_train <- subset(thyroid, split==TRUE)
thyroid_test <- subset(thyroid, split==FALSE)
library(rpart)
library(rpart.plot)
# Building a tree with a minimum of 10 observations on each leaf
thyroid_tree <- rpart(class ~ ., data = thyroid_train, control=rpart.control(minbucket=50))
prp(thyroid_tree)
# Building a tree with a minimum of 10 observations on each leaf
thyroid_tree <- rpart(class ~ ., data = thyroid_train, control=rpart.control(minbucket=10))
prp(thyroid_tree)
# Building a tree with a minimum of 10 observations on each leaf
thyroid_tree <- rpart(class ~ ., data = thyroid_train, control=rpart.control(minbucket=1))
prp(thyroid_tree)
table(thyroid$on_thyroxine)
table(thyroid$query_on_thyroxine)
table(thyroid$query_hypothyroid)
table(thyroid$query_hyperthyroid)
table(thyroid$antithyroid_medication)
table(thyroid$sick)
table(thyroid$pregnant)
table(thyroid$thyroid_surgery)
table(thyroid$I131_treatment)
table(thyroid$query_hypothyroid)
table(thyroid$query_hyperthyroid)
table(thyroid$lithium)
table(thyroid$goitre)
table(thyroid$tumor)
summary(thyroid)
thyroid <- read.csv("thyroid.dat", header = FALSE, skip = 26) # skipping the first 26 lines
colnames(thyroid) <- c("age", "sex", "on_thyroxine", "query_on_thyroxine", "antithyroid_medication", "sick", "pregnant", "thyroid_surgery", "I131_treatment", "query_hypothyroid", "query_hyperthyroid", "lithium", "goitre", "tumor", "hypopituitary", "psych", "TSH", "T3", "TT4", "T4U", "FTI","class")
str(thyroid)
# Changle "class" to factor
thyroid$class <- factor(thyroid$class)
# Multiply "age" by 100
thyroid$age <- 100 * thyroid$age
library(caTools)
set.seed(1000) # reproducibility
split <- sample.split(thyroid$class, SplitRatio = 0.7)
thyroid_train <- subset(thyroid, split==TRUE)
thyroid_test <- subset(thyroid, split==FALSE)
library(rpart)
library(rpart.plot)
# Building a tree with a minimum of 10 observations on each leaf
thyroid_tree <- rpart(class ~ ., data = thyroid_train, control=rpart.control(minbucket=1))
prp(thyroid_tree)
# Building a tree with a minimum of 10 observations on each leaf
thyroid_tree <- rpart(class ~ ., data = thyroid_train, control=rpart.control(minbucket=50))
prp(thyroid_tree)
# Generate predictions on training set
PredictCART_train = predict(thyroid_tree, type = "class")
# Confusion matrix of training set
conf_matrix_train <- table(thyroid_train$class, PredictCART_train)
conf_matrix_train
sum(diag(conf_matrix_train)) / sum(conf_matrix_train)
PredictCART_test = predict(thyroid_tree, newdata = thyroid_test, type = "class")
# Confusion matrix of test set
conf_matrix_test <- table(thyroid_test$class, PredictCART_test)
conf_matrix_test
sum(diag(conf_matrix_test)) / sum(conf_matrix_test)
library(caret)
library(e1071)
# Setting cross-validation to be 10-fold
fitControl = trainControl( method = "cv", number = 10 )
# Setting cp to .01, .02, ..., 0.5
cartGrid = expand.grid( .cp = (1:50)*0.01)
train(class ~ ., data = thyroid_train, method = "rpart", trControl = fitControl, tuneGrid = cartGrid)
thyroid_tree_cv <- rpart(class ~ ., data = thyroid_train, control=rpart.control(cp=0.03))
prp(thyroid_tree_cv)
# Generate predictions on training set
PredictCART_train_cv = predict(thyroid_tree_cv, type = "class")
# Confusion matrix of training set
conf_matrix_train_cv <- table(thyroid_train$class, PredictCART_train_cv)
conf_matrix_train_cv
# Generate predictions on training set
PredictCART_train_cv = predict(thyroid_tree_cv, type = "class")
# Confusion matrix of training set
conf_matrix_train_cv <- table(thyroid_train$class, PredictCART_train_cv)
conf_matrix_train_cv
sum(diag(conf_matrix_train_cv)) / sum(conf_matrix_train_cv)
# Generate predictions on test set using cross-validated set
PredictCART_test_cv = predict(thyroid_tree_cv, type = "class")
# Confusion matrix of training set
conf_matrix_test_cv <- table(thyroid_test$class, PredictCART_test_cv)
# Generate predictions on test set using cross-validated set
PredictCART_test_cv = predict(thyroid_tree_cv, newdat = thyroid_test, type = "class")
# Confusion matrix of training set
conf_matrix_test_cv <- table(thyroid_test$class, PredictCART_test_cv)
conf_matrix_test_cv
sum(diag(conf_matrix_test_cv)) / sum(conf_matrix_test_cv)
?plot
install.packages("jpeg")
library(jpeg)
setwd("~/")
img <- readJPEG(system.file("img", "999.jpg", package="jpeg"))
img <- readJPEG(system.file("img", "0999.jpg", package="jpeg"))
getcwd()
getwd()
img <- readJPEG(system.file("img", "0999.jpg", package="jpeg"))
img <- readJPEG(system.file("img", "0999.jpg", package="jpeg"))
img <- readJPEG(system.file("img", "0999.jpg", package="jpeg"))
?readJPEG
img <- readJPEG(system.file("img", "0999.JPG", package="jpeg"))
img <- readJPEG("0999.jpg")
str(img)
plot(img)
?clearNames
?clear
img <- readJPEG("0999_gray.jpg")
str(img)
img[1,1]
?dim
dim(img)
img[1,]
img[10,]
img[148,]
q()
setwd("./Boricuas_NCAA/Season_Summary_2019_2020/Maps")
source("arcs_map.r")
ggsave(filename = "arcs_map.png", width = 7.5, height = 7.5 * (722 / 959), device = "png", units = "in")
7.5 * (722 / 959)
ggsave(filename = "arcs_map.png", width = 7.5, height = 7.5 * (722 / 959), device = "png", units = "in")
ggsave(filename = "arcs_map.png", width = 8, height = 8 * (722 / 959), device = "png", units = "in")
?ggsggsave
?ggsave
ggsave(filename = "arcs_map.png", width = 8.5, height = 8.5 * (722 / 959), device = "png", units = "in")
source("arcs_map.r")
source("arcs_map.r")
all_players$Hometown
dim(all_players_2)
dim(all_players)
table(all_players_2$Hometown)
table(all_players_2$Division)
all_players_2[all_players_2$Division == "",]
source("./../Women/write_csv_files.r")
setwd("./../Women/")
source("write_csv_files.r")
setwd("./../Maps/")
source("arcs_map.r")
ggsave(filename = "arcs_map.png", width = 8.5, height = 8.5 * (722 / 959), device = "png", units = "in")
table(all_players$Institution)
dim(table(all_players$Institution))
as.data.frame(table(all_players$Institution))
table(all_players$Division)
?unique
?unique
getwd()
setwd("./..")
x <- read.csv("Conference_leaders.csv", encoding = "UTF-8")
setwd(./women)
setwd("./Women/")
x <- read.csv("Conference_leaders.csv", encoding = "UTF-8")
x
x <- read.csv("Conference_leaders.csv", encoding = "UTF-8")
summary(x)
unique(x$Player.Name)
x["Player_Name"]
x["Player_Name",]
x["Player.Name"]
x <- read.csv("Conference_leaders.csv", encoding = "UTF-8")
unique(x[c("Player_Name", "Division", "Position")])
dim(unique(x[c("Player_Name", "Division", "Position")]))
x <- read.csv("Conference_leaders.csv", encoding = "UTF-8")
dim(unique(x[c("Player_Name", "Division", "Position")]))
unique(x[c("Player_Name", "Division", "Position")])
x <- read.csv("Conference_leaders.csv", encoding = "UTF-8")
dim(unique(x[c("Player_Name", "Division", "Position")]))
source("conf_leaders_barplots.r")
p
source("conf_leaders_barplots.r")
p
source("conf_leaders_barplots.r")
p
source("conf_leaders_barplots.r")
p
source("conf_leaders_barplots.r")
p
source("conf_leaders_barplots.r")
p
source("conf_leaders_barplots.r")
p
source("conf_leaders_barplots.r")
q
source("conf_leaders_barplots.r")
q
source("conf_leaders_barplots.r")
q
table(conf_leaders$Player_Name)
sort(table(conf_leaders$Player_Name))
table(main$Sex1,main$District)
gender <- c("Female", "Male")
no <- c(411, 435)
if(conf_leaders$Category == "aces/set") "aces"
ifelse(conf_leaders$Category == "aces/set") "aces"
ifelse(conf_leaders$Category == "aces/set", "aces", conf_leaders$Category)
?ifelse
ifelse(conf_leaders$Category == "aces/set", "aces", 2)
ifelse(conf_leaders$Category == "aces/set", "aces", conf_leaders$Category)
ifelse(conf_leaders$Category == "aces/set", "aces")
ifelse(conf_leaders$Category == "aces/set", "aces", conf_leaders$Player_Name)
unique(conf_leaders$Category)
source("conf_leaders_barplots.r")
unique(conf_leaders$Category2)
conf_leaders$Category2
conf_leaders$Category
str()onf_leaders$Category
str(conf_leaders$Category)
source("conf_leaders_barplots.r")
conf_leaders$Category2
source("conf_leaders_barplots.r")
q
source("conf_leaders_barplots.r")
q
p
source("conf_leaders_barplots.r")
q
p
source("conf_leaders_barplots.r")
p
q
r
table(all_players_stats)
dim(all_players_stats)
getwd()
source("write_csv_files.r")
dim(all_players_stats)
dim(ncaa1_stats)
source("write_csv_files.r")
dim(ncaa1_stats)
dim(all_players_stats)
all_players_stats$Player[all_players_stats$D > 499]
all_players_stats[all_players_stats$D > 499,]
all_players_500_digs <- all_players_stats[all_players_stats$D > 499,]
?subset
all_players_500_digs <- all_players_stats[all_players_stats$D > 499 & !is.na(all_players_stats$D),]
dim(all_players_500_digs)
?merge
colnames(all_players_500_digs)
colnames(all_players)
merge(all_players_500_digs, all_players[c("Player", "Height")], by = "Player")
all_players_500_digs_heights <- merge(all_players_500_digs, all_players[c("Player", "Height")], by = "Player")
table(all_players_500_digs_heights$Height)
sort(table(all_players_500_digs_heights$Height))
all_players_500_digs_heights$Player[all_players_500_digs_heights$Height == "5-8"]
getwd()
setwd("./Articles/Lina_Bernier_Article/")
source("Bernier_heights_barplot_pr.r")
source("Bernier_heights_barplot_pr.r")
source("./../../Women/write_csv_files.r")
source("./../../Women/write_csv_files.r")
source("./../../Women/write_csv_files.r")
source("Bernier_heights_barplot_pr.r")
getwd()
source("./../../write_csv_files.r")
source("./../../write_csv_files.r")
setwd("./../..")
getwd()
source("write_csv_files.r")
setwd("./Articles/Lina_Bernier_Article/")
source("Bernier_heights_barplot_pr.r")
source("Bernier_heights_barplot_pr.r")
p
p <- ggplot(all_players_500_digs_heights) + geom_bar(aes(x=Height), fill="steelblue4", width=0.5, position = position_dodge(width=0.7))
p
source("Bernier_heights_barplot_pr.r")
source("Bernier_heights_barplot_pr.r")
source("Bernier_heights_barplot_pr.r")
source("Bernier_heights_barplot_pr.r")
source("Bernier_heights_barplot_pr.r")
source("Bernier_heights_barplot_pr.r")
source("Bernier_heights_barplot_pr.r")
source("Bernier_heights_barplot_pr.r")
all_players_500_digs_heights$Height
source("Bernier_heights_barplot_pr.r")
all_players_500_digs_heights$Height
levels(all_players_500_digs_heights$Height)
levels(all_players_500_digs_heights$Height)[1:8]
levels(all_players_500_digs_heights$Height) <- c(levels(all_players_500_digs_heights$Height)[1:8], "5-9")
c(levels(all_players_500_digs_heights$Height)[1:8], "5-9")
levels(all_players_500_digs_heights$Height) <- c(levels(all_players_500_digs_heights$Height)[1:8], "5-9", "5-10", "5-11")
levels(all_players_500_digs_heights$Height)
levels(all_players_500_digs_heights$Height) <- c(levels(all_players_500_digs_heights$Height)[1:9], "5-9", "5-10", "5-11")
levels(all_players_500_digs_heights$Height)
source("Bernier_heights_barplot_pr.r")
levels(all_players_500_digs_heights$Height) <- c(levels(all_players_500_digs_heights$Height)[1:9], "5-9", "5-10", "5-11")
levels(all_players_500_digs_heights$Height)
p <- ggplot(all_players_500_digs_heights) + geom_bar(aes(x=Height), fill="steelblue4", width=0.5, position = position_dodge(width=0.7)) +
scale_y_continuous(breaks = c(1, 5), limits = c(0, 5)) +
xlab("Height") +
theme_plot() +
ggtitle(label = "Heights of players from Puerto Rico with 500+ digs", subtitle = "Academic Year 2019-2020")
p
all_players_500_digs_heights$Height
all_players_500_digs_heights <- read.csv("./../../all_players_500_digs_heights.csv", encoding = "UTF-8")
x <- all_players_500_digs_heights$Height
x
x["5-1"]
x <- as.character(x)
x
x <- table(all_players_500_digs_heights$Height)
x
x{"5-0"}
x["5-0"]
x["5-9"] <- 0
x["5-10"] <- 0
x
as.data.frame(x)
x
str(x)
x
as.data.frame(x)
as.data.frame.matrix(x)
x
rbind(x)
as.data.frame(rbind(x))
cbind(x)
as.data.frame(cbind(x))
x_df <- as.data.frame(cbind(x))
colname(x_df)
colnames(x_df)
?as.data.frame
?cbind
table(all_players_500_digs_heights$Height)
cbind(table(all_players_500_digs_heights$Height))
cbind(table(all_players_500_digs_heights$Height), deparse.level = 1)
cbind(table(all_players_500_digs_heights$Height), deparse.level = 0)
str(x)
str(x_df)
x_df
x_df$names <- rownames(x_df)
x_df
x_df$names
as.factor(x_df$names)
source("Bernier_heights_barplot_pr.r")
source("Bernier_heights_barplot_pr.r")
p
heights_count_df
heights_count_df
source("Bernier_heights_barplot_pr.r")
source("Bernier_heights_barplot_pr.r")
source("Bernier_heights_barplot_pr.r")
source("Bernier_heights_barplot_pr.r")
?median
all_players_500_digs_heights$Player
all_players_500_digs_heights$Player[all_players_500_digs_heights$Height == "5-8"]
